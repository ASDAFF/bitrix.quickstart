Модуль "Веб-формы":
==============================
Модуль предназначен для создания веб-форм на сайте.

I. Возможности модуля.

1. Генерация веб-формы через административную панель.
1.1. Генерация каркаса веб-формы
1.2. Генерация почтового события
1.3. Генерация почтового шаблона
1.4. Генерация таблицы в БД
2. Готовый автоматический обработчик данных с веб-формы, работающий в режиме аякс. Обработчик запроса веб-формы писать не требуется.
   Необходимо только сконфигурировать его, настроив необходимый набор полей, валидаторы, события, сообщения об ошибках в классе веб-формы (подробнее см. далее).
   Обработчик находится в файле /bitrix/tools/ml2webforms_controller.php.
   Возвращает результат заполнения веб-формы в виде JSON-массива в функцию showResult, которую можно кастомизировать под свои нужды.
3. Просмотр списка результатов заполнения веб-формы с возможностью фильтрации и выгрузки в таблицу Excel
4. Работа с внешней базой данных: сохранение и просмотр результатов заполнения веб-формы из внешней БД

II. Инструкция по работе с модулем.

Порядок добавления новой веб-формы на сайт следующий:

1. Необходимо создать новую форму в административном интерфейсе в разделе "Сервисы / Multiline: Веб-формы".
Будут сгенерированы:
1.1. Каркас веб-формы в папке /bitrix/modules/multiline.ml2webforms/lib/forms/<id_формы>
1.2. Почтовое событие ML2WEBFORMS_<id_формы>__WEBFORM_FILL
1.3. Почтовый шаблон "Multiline: Веб-формы. Заполнена форма "<Название формы>""
1.4. Таблица в БД ml2webforms_<id_формы>

Необходимо корректно заполнить все необходимые поля, чтобы они автоматически попали в почтовый шаблон,
конфигурацию веб-формы и таблицу в базе данных.

Далее при необходимости можно скорректировать почтовый шаблон и таблицу БД (оптимизировать типы полей, добавить индексы)

2. Далее необходимо скинфигурировать поля формы в файле /bitrix/modules/multiline.ml2webforms/lib/forms/<id_формы>/class.php:

2.1. В качестве значения параметра 'required' можно задать анонимную (лямбда) функцию, возвращающую булево значение,
если необходимо, чтобы обязательность поля зависела от каких-либо условий в момент отправки формы, например:
    'attachment' => array(
        ...
        'required' => function() {
                return $_POST['status'] === '0'; // обязательно для заполнения, если поле status равно '0'
            },
        ...
    ),

2.2. Для полей типа "Раскрывающийся список" (WebForm::FIELD_TYPE_SELECT), "Список множественного выбора" (WebForm::FIELD_TYPE_SELECT_MULTIPLE),
"Радио-кнопки" (WebForm::FIELD_TYPE_RADIO) задать значения в параметре 'list' поля.
Есть возможность подгружать значения из таблицы в БД (параметр 'from'), пример конфигурации:
    'city' => array(
        'type' => WebForm::FIELD_TYPE_RADIO, // тип поля
        'required' => true, // обазательное
        'title' => array( // название поля
            'ru' => 'Город',
            'en' => 'City',
        ),
        'validators' => array(), // валидаторы
        'errorText' => array(), // тексты ошибок
        'list' => array(), // параметр 'list' должен быть задан обязательно хотя бы пустым массивом
        'from' => array(   // параметр загрузки списка значений из таблицы
            'table' => 'ml_realty_cities', // название таблицы
            'fields' => array( // конфигурация подгружаемых полей
                'id' => 'id', // primary key в подгружаемой таблице
                'title' => array(
                    'ru' => 'name', // поле отвечающее за название на русском языке
                    'en' => 'name'  // поле отвечающее за название на английском языке (необязательное)
                ),
            ),
            'filter' => '`id` < 3', // фильтр для отбора значений (минтаксис MYSQL WHERE)
        ),
        'value_type' => WebForm::FIELD_VALUE_TYPE_INTEGER, // тип значения
        'filterable' => true, // фильтруемое в списке заявок
    ),

Есть возможность подгружать значения из инфоблока (параметр 'iblock'), пример конфигурации:
    'city' => array(
        'type' => WebForm::FIELD_TYPE_RADIO, // тип поля
        'required' => true, // обазательное
        'title' => array( // название поля
            'ru' => 'Город',
            'en' => 'City',
        ),
        'validators' => array(), // валидаторы
        'errorText' => array(), // тексты ошибок
        'list' => array(), // параметр 'list' должен быть задан обязательно хотя бы пустым массивом
        'iblock' => array( // параметр загрузки списка значений из инфоблока
            'id' => '9', // id инфоблока
            'fields' => array( // подгружаемые поля
                'title' => array(
                    'ru' => 'NAME', // элемент списка на русском можно задавать свойства PROPERTY_...
                    'en' => 'PROPERTY_NAME_EN' // элемент списка на английском
                ),
            ),
            'filter' => array( // фильтр для метода CIBlockElement::GetList для отбора элементов списка
                'ACTIVE' => 'Y',
            ),
        ),
        'value_type' => WebForm::FIELD_VALUE_TYPE_INTEGER, // тип значения
        'filterable' => true, // фильтруемое в списке заявок
    ),


2.3. При необходимости добавить валидаторы в параметре 'validators' поля.
Параметр validators должен содержать массив валидаторов, например:
'validators' => array(
    array(
        WebForm::VALIDATOR_REGEXP,
        '8 \(\d{3}\)\d{3}-\d{2}-\d{2}'
    ),
    array(
        WebForm::VALIDATOR_EMAIL
    ),
),

Валидатор представляет из себя массив вида:
    array(
        <id валидатора>,
        <параметры валидатора>
    ),

На данный момент доступны следующие валидаторы:

а)  WebForm::VALIDATOR_REGEXP - соответствие регулярному выражению, в качестве второго параметра передается строка -
                                регулярное выражение, например:
    array(
        WebForm::VALIDATOR_REGEXP,
        '8 \(\d{3}\)\d{3}-\d{2}-\d{2}'
    ),

б)  WebForm::VALIDATOR_EMAIL - проверка на корректность емейла, второй параметр не задается, например:
    array(
        WebForm::VALIDATOR_EMAIL
    ),

в)  WebForm::VALIDATOR_INTEGER - проверка, является ли значение поля целым числом, например:
    array(
        WebForm::VALIDATOR_INTEGER
    ),

г)  WebForm::VALIDATOR_FLOAT - проверка, является ли значение поля числом, например:
    array(
        WebForm::VALIDATOR_FLOAT
    ),

д)  WebForm::VALIDATOR_SIZE - проверка на принадлежность числа к диапазону, в качестве второго параметра задается массив,
                              который может содержать один или оба ключа 'min' (минимальное значение) и 'max' (максимальное значение)
    array(
        WebForm::VALIDATOR_SIZE,
        array('min' => 3, 'max' => 100)
    )
    или
    array(
        WebForm::VALIDATOR_SIZE,
        array('min' => 3)
    )

е)  WebForm::VALIDATOR_LENGTH - проверка на длину строки, в качестве второго параметра задается массив,
                                который может содержать один или оба ключа 'min' (минимальная длина) и 'max' (максимальная длина)
    array(
        WebForm::VALIDATOR_LENGTH,
        array('min' => 3, 'max' => 100)
    )
    или
    array(
        WebForm::VALIDATOR_LENGTH,
        array('min' => 3)
    )

ж)  WebForm::VALIDATOR_CUSTOM - пользовательская проверка значения поля, в качестве второго параметра задается
                                лямбда-функция, принимающая значение поля и возвращающая true в случае корректной
                                валидации и false в случае некорректной, например:
    array(
        WebForm::VALIDATOR_CUSTOM,
        function ($value) { // проверка, является ли пришедшее поле числом меньше 5
            return (int)$value < 5;
        }
    )
2.4. Далее при необходимости следует переопределить тексты сообщений от формы об ошибках валидации полей. Сообщения
задаются в параметре 'errorText' для каждого поля, в следующем виде:
    'errorText' => array(
        '<код ошибки>' => array(
            'ru' => '<текст на русском>',
            'en' => '<текст на английском>',
        ),
    ),

например:
    'errorText' => array(
        'required_empty' => array(
            'ru' => 'Поле обязательно для заполнения',
            'en' => 'Field is required',
        ),
        'invalid_regexp' => array(
            'ru' => 'Некорректный номер телефона',
            'en' => 'Invalid phone number',
        ),
    ),

Доступны следующие коды ошибок:
    'required_empty'     - обязательное для заполнения поле не заполнено
    'invalid_regexp'     - поле не прошло валидацию по WebForm::VALIDATOR_REGEXP
    'invalid_email'      - поле не прошло валидацию по WebForm::VALIDATOR_EMAIL
    'invalid_integer'    - поле не прошло валидацию по WebForm::VALIDATOR_INTEGER
    'invalid_float'      - поле не прошло валидацию по WebForm::VALIDATOR_FLOAT
    'invalid_size_min'   - поле не прошло валидацию по WebForm::VALIDATOR_SIZE по ключу min, в сообщение можно вставить
                           шаблон {min}, который будет заменен на значение ключа min
    'invalid_size_max'   - поле не прошло валидацию по WebForm::VALIDATOR_SIZE по ключу max, в сообщение можно вставить
                           шаблон {max}, который будет заменен на значение ключа max
    'invalid_length_min' - поле не прошло валидацию по WebForm::VALIDATOR_LENGTH по ключу min, в сообщение можно вставить
                           шаблон {min}, который будет заменен на значение ключа min
    'invalid_length_max' - поле не прошло валидацию по WebForm::VALIDATOR_LENGTH по ключу max, в сообщение можно вставить
                           шаблон {max}, который будет заменен на значение ключа max
    'invalid_custom'     - поле не прошло валидацию по WebForm::VALIDATOR_CUSTOM

2.5. Далее при необходимости следует переопределить тексты сообщений от формы:
2.5.1. Текст сообщения об успешном заполнении веб-формы переопределяется в методе:
    public function getSuccessMessage() {
        return array(
            'ru' => 'Спасибо, Ваша заявка принята!',
            'en' => 'Your request has been sent successfully',
        );
    }
2.5.2. Текст сообщения о неуспешном заполнении веб-формы переопределяется в методе:
    public function getErrorMessage() {
        return array(
            'ru' => 'Ошибка заполнения формы',
            'en' => 'Error form fill',
        );
    }
2.5.3. Текст сообщения о неуспешном добавлении в БД результата заполнения веб-формы переопределяется в методе:
    public function getDBErrorMessage() {
        return array(
            'ru' => 'Невозможно добавить результаты запроса в БД!',
            'en' => 'Unable to add request to DB',
        );
    }

3. Далее необходимо установить компонент веб-формы на сайте:
<?$APPLICATION->IncludeComponent("multiline:ml2webforms.form.display","<id_шаблона>",Array("ID" => "<id_формы>"));?>

например:
<?$APPLICATION->IncludeComponent("multiline:ml2webforms.form.display","",Array("ID" => "callback"));?>
<?$APPLICATION->IncludeComponent("multiline:ml2webforms.form.display",".default",Array("ID" => "callback"));?>
<?$APPLICATION->IncludeComponent("multiline:ml2webforms.form.display","feedback_form_mobile",Array("ID" => "callback"));?>

по умолчанию используется шаблон .default, при необходимости шаблон можно кастомизировать или создать его копию

Шаблон содержит следующие файлы

template.php - содержимое шаблона может быть любым, обязательно, чтобы:
               1. шаблон формы был заключен между вызовами
                        <?php echo $arResult['TPL']->getFormBegin();?>
                        <?php echo $arResult['TPL']->getFormEnd();?>
                        в метод getFormBegin можно передать массив атрибутов тега <form>, например:
                        <?php echo $arResult['TPL']->getFormBegin(array('class' => 'my_form', 'style' => 'display: inline', 'data-view' => 'big'));?>
               2. шаблон содержал все поля с атрибутом name из конфигурации

script.js - файл должен содержать объект Ml2WebForms_<id_формы> с обязательным
            методом showResult(result), принимающим и обрабатывающим
            json объект с ответом об успехе/ошибках заполнения веб-формы

            по умолчанию скрипт принимает json-ответ контроллера форм и, в случае ошибки, добавляет border: 1px solid red и
            атрибут title с текстом ошибки к родительскому элементу некорректного поля

            пример json-массива успешного заполнения формы:
            {"status":"success","message":"Ваша заявка принята"}

            пример json-массива с ошибками
            {
                "status":"failure",
                "message":"Заполните корректно все поля",
                "errors":{
                    "name":[
                        ["required_empty","Поле не заполнено"]
                    ],
                    "email":[
                        ["required_empty","Поле не заполнено"]
                    ],
                    "phone":[
                        ["invalid_regexp","Поле заполнено некорректно"]
                    ]
                }
            }

style.css - файл необходимо дополнить своими стилями при необходимости

4. Для использования внешней БД для хранения результатов заполнения веб-формы необходимо:
В классе веб-формы в файле /bitrix/modules/multiline.ml2webforms/lib/forms/<id_формы>/class.php

определить следующие параметры:

    protected $extDbHost = '<сервер бд>';
    protected $extDbName = '<имя бд>';
    protected $extDbUser = '<пользователь бд>';
    protected $extDbPassword = '<пароль бд>';

    public function useExternalDB() {
        return true;
    }

5. При необходимости можно задать события в классе веб-формы /bitrix/modules/multiline.ml2webforms/lib/forms/<id_формы>/class.php
Событие, которое срабатывает перед добавлением результата формы:

принимает поля формы и должно их вернуть с какими либо изменениями

можно прервать сохранение результата, выбросив исключение throw new \Exception('Сообщение....')
'Сообщение....' будет возвращено в ответе веб-формы со статусом 'failure'

    public function onBeforeResultAdd(array $fields) {

        return $fields;
    }

Событие, которые срабатывает перед добавлением результата формы:

принимает поля формы

    public function onAfterResultAdd(array $fields) {
    }


==============================
