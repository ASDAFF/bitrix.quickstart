<?php

// Warning! This code was generated by WSDL2PHP tool. 
// author: Filippov Andrey <afi.work@gmail.com> 
// see https://solo-framework-lib.googlecode.com 
// Timestamp: 1301913375 


/**
 * Тип, описывающий статусы операций в системе МОНЕТА.РУ.
	 * Данный тип может иметь только определенные значения, описанные ниже.
	 * Transaction status type in MONETA.RU.
	 * This type may have enumerated values.
	 * 
 */
class MonetaOperationStatus
{

	/**
	 * В обработке
	 * Transaction processing is in progress
	 * 
	 * 
	 * @var string
	 */
	const INPROGRESS = 'INPROGRESS';

	/**
	 * Операция обработана
	 * Transaction processing completed successfully
	 * 
	 * 
	 * @var string
	 */
	const SUCCEED = 'SUCCEED';

	/**
	 * Операция отменена
	 * Transaction processing is canceled
	 * 
	 * 
	 * @var string
	 */
	const CANCELED = 'CANCELED';

	/**
	 * Уведомление по операции не отправлено (или не принято)
	 * External notification is not sent (or not accepted)
	 * 
	 * 
	 * @var string
	 */
	const TAKENIN_NOTSENT = 'TAKENIN_NOTSENT';

	/**
	 * Операция создана
	 * Transaction is registered
	 * 
	 * 
	 * @var string
	 */
	const CREATED = 'CREATED';

}

/**
 * Тип, описывающий валюты, используемые в системе МОНЕТА.РУ.
	 * Данный тип может иметь только строго определенные значения, описанные ниже.
	 * Currency type in MONETA.RU.
	 * Must be one of values listed below.
	 * 
 */
class MonetaCurrency
{

	/**
	 * 
	 * 
	 * @var string
	 */
	const RUB = 'RUB';

	/**
	 * 
	 * 
	 * @var string
	 */
	const USD = 'USD';

	/**
	 * 
	 * 
	 * @var string
	 */
	const EUR = 'EUR';

	/**
	 * 
	 * 
	 * @var string
	 */
	const GBP = 'GBP';

}

/**
 * Тип, описывающий статусы счетов в системе МОНЕТА.РУ.
	 * Счет может быть либо активным, либо заблокированным.
	 * Account status in MONETA.RU.
	 * May be either active or inactive.
	 * 
 */
class MonetaAccountStatus
{

	/**
	 * Активный счет
	 * Active account
	 * 
	 * 
	 * @var int
	 */
	const AccountStatus1 = '1';

	/**
	 * Заблокированный счет
	 * Inactive (blocked) account
	 * 
	 * 
	 * @var int
	 */
	const AccountStatus2 = '2';

}

/**
 * Типы счетов в системе МОНЕТА.РУ.
	 * Account types in MONETA.RU.
	 * 
 */
class MonetaAccountType
{

	/**
	 * Обычный счет
	 * Standard account
	 * 
	 * 
	 * @var int
	 */
	const AccountType1 = '1';

	/**
	 * Расширенный счет
	 * Advanced account
	 * 
	 * 
	 * @var int
	 */
	const AccountType2 = '2';

	/**
	 * Бонус-счет
	 * Bonus account
	 * 
	 * 
	 * @var int
	 */
	const AccountType3 = '3';

}

/**
 * Тип данных пользователя.
	 * User profile information type.
	 * 
 */
class MonetaProfileType
{

	/**
	 * Тип данных "Организация". В данных такого типа присутствуют поля,
	 * характерные для организаций, например: "Название организации", "ФИО директора" и т.п.
	 * "Organization" profile type containing organization related information.
	 * 
	 * 
	 * @var string
	 */
	const organization = 'organization';

	/**
	 * Тип данных "Клиент". В данных такого типа присутствуют поля,
	 * характерные для обычных пользователей, например: "фамилия", "имя", "отчество" и т.д.
	 * "Client" profile type containing person related information.
	 * 
	 * 
	 * @var string
	 */
	const client = 'client';

}

/**
 * Типы документов, поддерживаемые в системе МОНЕТА.РУ.
	 * Document type supported in MONETA.RU.
	 * 
 */
class MonetaDocumentType
{

	/**
	 * Паспорт
	 * Civil passport
	 * 
	 * 
	 * @var string
	 */
	const PASSPORT = 'PASSPORT';

	/**
	 * Водительское удостоверение
	 * User's driving licence
	 * 
	 * 
	 * @var string
	 */
	const DRIVING_LICENCE = 'DRIVING_LICENCE';

	/**
	 * Военный билет
	 * Military ID
	 * 
	 * 
	 * @var string
	 */
	const MILITARY_ID = 'MILITARY_ID';

	/**
	 * Другой документ
	 * Other document
	 * 
	 * 
	 * @var string
	 */
	const OTHER = 'OTHER';

}
	
/**
 * Тип, описывающий параметры операции в запросах.
	 * Transaction parameters type for requests.
	 * 
 */	
class MonetaTransactionRequestType
{
		
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 * 
	 * @var long
	 */
	 public $payer = null;
		
	/**
	 * Номер счета получателя
	 * Payee account number
	 * 
	 * 
	 * @var long
	 */
	 public $payee = null;
		
	/**
	 * Сумма операции.
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету плательщика,
	 * то интерпретируется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету получателя,
	 * то интерпретируется как сумма к зачислению (в валюте получателя).
	 * Transaction amount.
	 * If isPayerAmount is omitted
	 * and user has access only to payer account,
	 * then is interpreted as debit amount (in payer's currency).
	 * If isPayerAmount is omitted
	 * and user has access only to payee account,
	 * then is interpreted as credit amount (in payee's currency).
	 * 
	 * 
	 * @var decimal
	 */
	 public $amount = null;
		
	/**
	 * Если пользователь имеет доступ как к счету плательщика, так и счету получателя,
	 * то флаг isPayerAmount обязателен.
	 * Если флаг isPayerAmount установлен (true), то amount используется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount сброшен (false), то amount используется как сумма к зачислению (в валюте получателя).
	 * If user has access to both accounts, then isPayerAmount flag is obligatory.
	 * If isPayerAmount flag is "true", then amount is used as debit amount (in payer's currency).
	 * If isPayerAmount flag is "false", then amount is used as credit amount (in payee's currency).
	 * 
	 * 
	 * @var boolean
	 */
	 public $isPayerAmount = null;
		
	/**
	 * Платежный пароль счета плательщика
	 * Payment password for payer account
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $paymentPassword = null;
		
	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 * 
	 * @var string
	 */
	 public $clientTransaction = null;
		
	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $description = null;
		
	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $operationInfo = null;
		
	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 * 
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;
	
}
		
/**
 * Тип, описывающий параметры операции в запросах в пакетном режиме.
	 * Transaction parameters type for requests in batch processing mode.
	 * 
 */	
class MonetaTransactionBatchRequestType
{
		
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 * 
	 * @var boolean
	 */
	 public $transactional = null;
		
	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 * 
	 * @var boolean
	 */
	 public $exitOnFailure = null;
		
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @var MonetaTransactionRequestType
	 */
	 public $transaction = null;
	
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @param MonetaTransactionRequestType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaTransactionRequestType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Тип, описывающий атрибуты операции в ответах.
	 * Transaction attributes type for responses.
	 * 
 */	
class MonetaTransactionResponseType
{
		
	/**
	 * Текущий статус операции
	 * Current transaction status
	 * 
	 * 
	 * @var string
	 */
	 public $status = null;
		
	/**
	 * Время последней модификации операции
	 * Transaction modification timestamp
	 * 
	 * 
	 * @var dateTime
	 */
	 public $dateTime = null;
		
	/**
	 * Номер операции
	 * Transaction ID in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $transaction = null;
		
	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 * 
	 * @var string
	 */
	 public $clientTransaction = null;
	
}
		
/**
 * Тип, описывающий атрибуты операции в ответах в пакетном запросе.
	 * Transaction attributes type for responses in batch processing mode.
	 * 
 */	
class MonetaTransactionBatchResponseType
{
		
	/**
	 * Поле содержит описание ошибки, если операция не была проведена.
	 * В этом случае поле transaction - пустое. Если операция проведена,
	 * то поле error пустое, а поле transaction содержит детали операции.
	 * Error description in case of tranfer processing failure.
	 * If transfer processed successfully "error" is empty
	 * and "transaction" element contains transaction details.
	 * 
	 * 
	 * @var string
	 */
	 public $error = null;
		
	/**
	 * 
	 * 
	 * @var MonetaTransactionResponseType
	 */
	 public $transaction = null;
	
}
		
/**
 * Тип, описывающий атрибуты операции в ответах в пакетном запросе.
	 * Transaction attributes type for responses in batch processing mode.
	 * 
 */	
class MonetaOperationInfoBatchResponseType
{
		
	/**
	 * Поле содержит описание ошибки, если операция не была проведена.
	 * В этом случае поле transaction - пустое. Если операция проведена,
	 * то поле error пустое, а поле transaction содержит детали операции.
	 * Error description in case of tranfer processing failure.
	 * If transfer processed successfully "error" is empty
	 * and "transaction" element contains transaction details.
	 * 
	 * 
	 * @var string
	 */
	 public $error = null;
		
	/**
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $transaction = null;
	
}
		
/**
 * Тип для запроса на регистрацию операции с блокировкой средств на счете плательщика.
	 * Transaction registration and debiting funds from payer's account request type.
	 * 
 */	
class MonetaAuthoriseTransactionRequestType extends MonetaTransactionRequestType
{
		
	/**
	 * Номер операции. Необязательное поле.
	 * Transaction ID. Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $transactionId = null;
	
}
		
/**
 * Тип, описывающий параметры операции в запросах в пакетном режиме.
	 * Transaction parameters type for requests in batch processing mode.
	 * 
 */	
class MonetaAuthoriseTransactionBatchRequestType
{
		
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 * 
	 * @var boolean
	 */
	 public $transactional = null;
		
	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 * 
	 * @var boolean
	 */
	 public $exitOnFailure = null;
		
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @var MonetaTransactionRequestType
	 */
	 public $transaction = null;
	
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @param MonetaTransactionRequestType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaTransactionRequestType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Тип для запроса подтверждения операции.
	 * Transaction confirmation request type.
	 * 
 */	
class MonetaConfirmTransactionRequestType
{
		
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 * 
	 * @var long
	 */
	 public $transactionId = null;
		
	/**
	 * Платежный пароль счета плательщика
	 * Payment password for payer account
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $paymentPassword = null;
		
	/**
	 * Код протекции
	 * Protection code
	 * 
	 * 
	 * @var string
	 */
	 public $protectionCode = null;
		
	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $operationInfo = null;
		
	/**
	 * Сумма операции.
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету плательщика,
	 * то интерпретируется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету получателя,
	 * то интерпретируется как сумма к зачислению (в валюте получателя).
	 * Transaction amount.
	 * If isPayerAmount is omitted
	 * and user has access only to payer account,
	 * then is interpreted as debit amount (in payer's currency).
	 * If isPayerAmount is omitted
	 * and user has access only to payee account,
	 * then is interpreted as credit amount (in payee's currency).
	 * 
	 * 
	 * @var decimal
	 */
	 public $amount = null;
		
	/**
	 * Если пользователь имеет доступ как к счету плательщика, так и счету получателя,
	 * то флаг isPayerAmount обязателен.
	 * Если флаг isPayerAmount установлен (true), то amount используется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount сброшен (false), то amount используется как сумма к зачислению (в валюте получателя).
	 * If user has access to both accounts, then isPayerAmount flag is obligatory.
	 * If isPayerAmount flag is "true", then amount is used as debit amount (in payer's currency).
	 * If isPayerAmount flag is "false", then amount is used as credit amount (in payee's currency).
	 * 
	 * 
	 * @var boolean
	 */
	 public $isPayerAmount = null;
		
	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 * 
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;
	
}
		
/**
 * Тип для запроса подтверждения операции в пакетном режиме.
	 * Batch mode transaction confirmation request type.
	 * 
 */	
class MonetaConfirmTransactionBatchRequestType
{
		
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 * 
	 * @var boolean
	 */
	 public $transactional = null;
		
	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 * 
	 * @var boolean
	 */
	 public $exitOnFailure = null;
		
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @var MonetaConfirmTransactionRequestType
	 */
	 public $transaction = null;
	
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @param MonetaConfirmTransactionRequestType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaConfirmTransactionRequestType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Тип для запроса на отмену операции.
	 * Transaction cancelation request type.
	 * 
 */	
class MonetaCancelTransactionRequestType
{
		
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 * 
	 * @var long
	 */
	 public $transactionId = null;
		
	/**
	 * Код протекции
	 * Protection code
	 * 
	 * 
	 * @var string
	 */
	 public $protectionCode = null;
		
	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $description = null;
	
}
		
/**
 * Тип, описывающий атрибуты при ответе на запрос отмены операции.
	 * Transaction cancelation response type.
	 * 
 */	
class MonetaCancelTransactionResponseType
{
		
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 * 
	 * @var long
	 */
	 public $transactionId = null;
		
	/**
	 * Статус операции
	 * Transaction status
	 * 
	 * 
	 * @var string
	 */
	 public $operationStatus = null;
	
}
		
/**
 * Тип для запроса на отмену операций в пакетном режиме.
	 * Batch mode transaction cancelation request type.
	 * 
 */	
class MonetaCancelTransactionBatchRequestType
{
		
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 * 
	 * @var boolean
	 */
	 public $transactional = null;
		
	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 * 
	 * @var boolean
	 */
	 public $exitOnFailure = null;
		
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @var MonetaCancelTransactionRequestType
	 */
	 public $transaction = null;
	
	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 * 
	 * @param MonetaCancelTransactionRequestType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaCancelTransactionRequestType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Тип, описывающий атрибуты при ответе на запрос отмены операций в пакетной режиме.
	 * Transaction cancelation response in batch mode.
	 * 
 */	
class MonetaCancelTransactionBatchResponseType
{
		
	/**
	 * Поле содержит описание ошибки, если операция не была проведена.
	 * В этом случае поле transaction - пустое. Если операция проведена,
	 * то поле error пустое, а поле transaction содержит детали операции.
	 * Error description in case of tranfer processing failure.
	 * If transfer processed successfully "error" is empty
	 * and "transaction" element contains transaction details.
	 * 
	 * 
	 * @var string
	 */
	 public $error = null;
		
	/**
	 * 
	 * 
	 * @var MonetaCancelTransactionResponseType
	 */
	 public $transaction = null;
	
}
		
/**
 * Тип, описывающий суммы и комиссии в предварительном расчете операции.
	 * Type describes amount and fees for preliminary calculation of transaction.
	 * 
 */	
class MonetaForecastTransactionResponseType
{
		
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 * 
	 * @var long
	 */
	 public $payer = null;
		
	/**
	 * Валюта счета плательщика
	 * Currency of payer account
	 * 
	 * 
	 * @var string
	 */
	 public $payerCurrency = null;
		
	/**
	 * Сумма к списанию
	 * Debit amount
	 * 
	 * 
	 * @var decimal
	 */
	 public $payerAmount = null;
		
	/**
	 * Комиссия списания средств
	 * Debit fee
	 * 
	 * 
	 * @var decimal
	 */
	 public $payerFee = null;
		
	/**
	 * Номер счета получателя
	 * Payee account number
	 * 
	 * 
	 * @var long
	 */
	 public $payee = null;
		
	/**
	 * Валюта счета получателя
	 * Currency of payee account
	 * 
	 * 
	 * @var string
	 */
	 public $payeeCurrency = null;
		
	/**
	 * Сумма к зачислению
	 * Credit amount
	 * 
	 * 
	 * @var decimal
	 */
	 public $payeeAmount = null;
		
	/**
	 * Комиссия зачисления средств
	 * Credit fee
	 * 
	 * 
	 * @var decimal
	 */
	 public $payeeFee = null;
		
	/**
	 * Название счета плательщика
	 * Payer account alias
	 * 
	 * 
	 * @var string
	 */
	 public $payerAlias = null;
		
	/**
	 * Название счета получателя
	 * Payee account alias
	 * 
	 * 
	 * @var string
	 */
	 public $payeeAlias = null;
	
}
		
/**
 * Тип, описывающий состояние операции в системе МОНЕТА.РУ
	 * Type describes verification status of transaction.
	 * 
 */	
class MonetaVerifyTransferResponseType
{
		
	/**
	 * Если поле равно true, то данная операция может
	 * быть проведена в системе МОНЕТА.РУ
	 * If true the transaction may be processed in MONETA.RU
	 * 
	 * 
	 * @var boolean
	 */
	 public $isTransactionValid = null;
		
	/**
	 * Описание текущего статуса операции.
	 * Description of current transaction status.
	 * 
	 * 
	 * @var string
	 */
	 public $description = null;
		
	/**
	 * Если операция может быть проведена, то в данном поле содержатся детали операции.
	 * Иначе - это поле пустое.
	 * Additional information if transaction may be processed. Otherwise empty.
	 * 
	 * 
	 * @var MonetaForecastTransactionResponseType
	 */
	 public $forecast = null;
	
}
		
/**
 * Тип, описывающий атрибуты счета в системе МОНЕТА.РУ.
	 * Account information container type.
	 * 
 */	
class MonetaAccountInfo
{
		
	/**
	 * Номер счета в системе МОНЕТА.РУ
	 * Account number
	 * 
	 * 
	 * @var long
	 */
	 public $id = null;
		
	/**
	 * Валюта данного счета
	 * Currency of account
	 * 
	 * 
	 * @var string
	 */
	 public $currency = null;
		
	/**
	 * Баланс на данном счете
	 * Current balance of account
	 * 
	 * 
	 * @var decimal
	 */
	 public $balance = null;
		
	/**
	 * Доступный баланс на данном счете
	 * Available balance of account
	 * 
	 * 
	 * @var decimal
	 */
	 public $availableBalance = null;
		
	/**
	 * Тип счета в системе МОНЕТА.РУ
	 * Type of account
	 * 
	 * 
	 * @var int
	 */
	 public $type = null;
		
	/**
	 * Статус счета в системе МОНЕТА.РУ
	 * Status of account
	 * 
	 * 
	 * @var int
	 */
	 public $status = null;
		
	/**
	 * Название счета в системе МОНЕТА.РУ. Необязательное поле
	 * Alias of account. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $alias = null;
		
	/**
	 * URL после списания средств. Необязательное поле.
	 * URL on debiting. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onSuccessfulDebitUrl = null;
		
	/**
	 * URL после зачисления средств. Необязательное поле.
	 * URL on crediting. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onSuccessfulCreditUrl = null;
		
	/**
	 * Код проверки целостности данных. Необязательное поле.
	 * Payment form data integrity signature. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $signature = null;
		
	/**
	 * Если баланс счета меньше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is less than threshold. Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $lowBalanceThreshold = null;
		
	/**
	 * Если баланс счета больше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is greater than threshold. Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $highBalanceThreshold = null;
		
	/**
	 * Информация о доступе к счету. Информация отдается, если счет является делегированным. Необязательное поле.
	 * Account access information. Available if the account is delegated, otherwise omitted. Optional.
	 * 
	 * 
	 * @var MonetaAccountAccessInfo
	 */
	 public $accountAccess = null;
		
	/**
	 * Счет-прототип с которого берутся свойства "по умолчанию". Необязательное поле.
	 * Prototype account for default properties values. Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $prototypeAccountId = null;
		
	/**
	 * URL после отмены списания средств. Необязательное поле.
	 * URL on cancelled debit. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onCancelledDebitUrl = null;
		
	/**
	 * URL после отмены зачисления средств. Необязательное поле.
	 * URL on cancelled credit. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onCancelledCreditUrl = null;
	
}
		
/**
 * Тип, описывающий доступ к счету.
	 * Account access description type.
	 * 
 */	
class MonetaAccountAccessInfo
{
		
	/**
	 * Доступ на изменение свойств счета
	 * Account attributes modification access
	 * 
	 * 
	 * @var boolean
	 */
	 public $accessToWrite = null;
		
	/**
	 * Доступ на снятие средств со счета
	 * Account debiting access
	 * 
	 * 
	 * @var boolean
	 */
	 public $accessToTakenOut = null;
		
	/**
	 * Доступ на зачисление средств на счет
	 * Account crediting access
	 * 
	 * 
	 * @var boolean
	 */
	 public $accessToTakenIn = null;
	
}
		
/**
 * Тип, который позволяет работать с сущностями типа "ключ-значение".
	 * Key-value pairs type.
	 * 
 */	
class MonetaKeyValueAttribute
{
		
	/**
	 * 
	 * 
	 * @var string
	 */
	 public $key = null;
		
	/**
	 * 
	 * 
	 * @var string
	 */
	 public $value = null;
	
}
		
/**
 * Тип, расширяющий KeyValueAttribute.
	 * В данном типе добавлено поле approved, которое показывает,
	 * проверено или нет данное свойство. Поле approved - не обязательное.
	 * Extended KeyValueAttribute Type.
	 * Approved element shows if attribute value is approved or not.
	 * Approved element is optional.
	 * 
 */	
class MonetaKeyValueApprovedAttribute extends MonetaKeyValueAttribute
{
		
	/**
	 * 
	 * 
	 * @var boolean
	 */
	 public $approved = null;
	
}
		
/**
 * Тип, описывающий операцию в системе МОНЕТА.РУ.
	 * Он представляет собой номер (id) операции и набор полей,
	 * которые присутствуют у данной операции. Поля представлены в виде "ключ-значение".
	 * Transaction type contains transaction id and key-value pairs representing transaction attributes.
	 * 
 */	
class MonetaOperationInfo
{
		
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 * 
	 * @var long
	 */
	 public $id = null;
		
	/**
	 * Поля операции. Полей в операции может быть 0 и более.
	 * Список полей:
	 * clienttransaction - внешний (не в системе МОНЕТА.РУ) номер операции;
	 * statusid - статус операции;
	 * typeid - тип операции:
	 * 2,10 - оплата с пользовательского счета,
	 * 3 - оплата с внешней платежной системы,
	 * 7,14 - пополнение счета,
	 * 4,13 - вывод на внешнюю платежную систему,
	 * 11 - вывод на пользовательский счет,
	 * 12 - внутренний перевод;
	 * category - категория операции:
	 * DEPOSIT - ввод средств,
	 * WITHDRAWAL - вывод средств,
	 * TRANSFER - внутренний перевод,
	 * BUSINESS - товары и услуги;
	 * modified - время последнего изменения операции;
	 * sourceaccountid - номер счета, с которого произведена операция;
	 * sourcecurrencycode - валюта счета;
	 * sourceamount - сумма по операции;
	 * sourceamountfee - сумма комиссии;
	 * sourceamounttotal - общая сумма с учетом комиссии;
	 * targetaccountid - корреспондентский счет;
	 * targetalias - название корреспондентского счета;
	 * customfield:* - произвольный набор значений.
	 * В операции их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * Transaction attributes. Attributes set may be empty.
	 * Attributes list:
	 * clienttransaction - external transaction ID;
	 * statusid - transaction status;
	 * typeid - transaction type:
	 * 2,10 - payment from user account,
	 * 3 - payment from external system,
	 * 7,14 - deposit,
	 * 4,13 - withdrawal to external system,
	 * 11 - withdrawal to user account,
	 * 12 - inner transfer;
	 * category - transaction category:
	 * DEPOSIT,
	 * WITHDRAWAL,
	 * TRANSFER,
	 * BUSINESS;
	 * modified - transaction modification timestamp;
	 * sourceaccountid - account number;
	 * sourcecurrencycode - account currency;
	 * sourceamount - transaction amount;
	 * sourceamountfee - transaction commission;
	 * sourceamounttotal - total transaction amount incl. commission;
	 * targetaccountid - correspondent account number;
	 * targetalias - alias of correspondent account;
	 * customfield:* - custom list of values.
	 * The transaction may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * 
	 * 
	 * @var MonetaKeyValueAttribute
	 */
	 public $attribute = null;
	
	/**
	 * Поля операции. Полей в операции может быть 0 и более.
	 * Список полей:
	 * clienttransaction - внешний (не в системе МОНЕТА.РУ) номер операции;
	 * statusid - статус операции;
	 * typeid - тип операции:
	 * 2,10 - оплата с пользовательского счета,
	 * 3 - оплата с внешней платежной системы,
	 * 7,14 - пополнение счета,
	 * 4,13 - вывод на внешнюю платежную систему,
	 * 11 - вывод на пользовательский счет,
	 * 12 - внутренний перевод;
	 * category - категория операции:
	 * DEPOSIT - ввод средств,
	 * WITHDRAWAL - вывод средств,
	 * TRANSFER - внутренний перевод,
	 * BUSINESS - товары и услуги;
	 * modified - время последнего изменения операции;
	 * sourceaccountid - номер счета, с которого произведена операция;
	 * sourcecurrencycode - валюта счета;
	 * sourceamount - сумма по операции;
	 * sourceamountfee - сумма комиссии;
	 * sourceamounttotal - общая сумма с учетом комиссии;
	 * targetaccountid - корреспондентский счет;
	 * targetalias - название корреспондентского счета;
	 * customfield:* - произвольный набор значений.
	 * В операции их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * Transaction attributes. Attributes set may be empty.
	 * Attributes list:
	 * clienttransaction - external transaction ID;
	 * statusid - transaction status;
	 * typeid - transaction type:
	 * 2,10 - payment from user account,
	 * 3 - payment from external system,
	 * 7,14 - deposit,
	 * 4,13 - withdrawal to external system,
	 * 11 - withdrawal to user account,
	 * 12 - inner transfer;
	 * category - transaction category:
	 * DEPOSIT,
	 * WITHDRAWAL,
	 * TRANSFER,
	 * BUSINESS;
	 * modified - transaction modification timestamp;
	 * sourceaccountid - account number;
	 * sourcecurrencycode - account currency;
	 * sourceamount - transaction amount;
	 * sourceamountfee - transaction commission;
	 * sourceamounttotal - total transaction amount incl. commission;
	 * targetaccountid - correspondent account number;
	 * targetalias - alias of correspondent account;
	 * customfield:* - custom list of values.
	 * The transaction may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * 
	 * 
	 * @param MonetaKeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(MonetaKeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}
		
/**
 * Тип, представляющий список операций.
	 * Содержит разбиение по страницам для отображения длинных списков.
	 * Transaction list type.
	 * Contains paged structure for long list presentation.
	 * 
 */	
class MonetaOperationInfoList
{
		
	/**
	 * Количество операций, возвращаемых в результате запроса.
	 * Transaction per page within one request.
	 * 
	 * 
	 * @var long
	 */
	 public $pageSize = null;
		
	/**
	 * Номер текущей страницы. Нумерация начинается с 1
	 * Current page number starting with 1.
	 * 
	 * 
	 * @var long
	 */
	 public $pageNumber = null;
		
	/**
	 * Максимальное количество страниц с операциями по данному запросу
	 * Total page count for given request.
	 * 
	 * 
	 * @var long
	 */
	 public $pagesCount = null;
		
	/**
	 * Количество операций на текущей странице.
	 * Меньше или равно pageSize.
	 * Последняя страница может содержать операций меньше, чем pageSize.
	 * Transactions count in current page.
	 * Less or equal to pageSize.
	 * Last page may contain less than pageSize transactions.
	 * 
	 * 
	 * @var long
	 */
	 public $size = null;
		
	/**
	 * Общее количество операций, которое можно получить в данной
	 * выборке
	 * Total transactions count for given request.
	 * 
	 * 
	 * @var long
	 */
	 public $totalSize = null;
		
	/**
	 * Список операций
	 * Transaction list
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $operation = null;
	
	/**
	 * Список операций
	 * Transaction list
	 * 
	 * 
	 * @param MonetaOperationInfo
	 *
	 * @return void
	 */
	public function addOperation(MonetaOperationInfo $item)
	{
		$this->operation[] = $item;
	}

}
		
/**
 * Тип, позволяющий задать необходимую страницу при отображении длинных списков.
	 * Long list retrieval type.
	 * 
 */	
class MonetaPager
{
		
	/**
	 * Номер страницы, которую нужно получить. Минимальное значение равно 1.
	 * Значение по умолчанию равно 1.
	 * Page number to retrieve. Minimal value is 1.
	 * By default is 1.
	 * 
	 * 
	 * @var int
	 */
	 public $pageNumber = null;
		
	/**
	 * Сколько записей необходимо получить на одной странице. Минимальное
	 * значение равно 1. Максимальное значение равно 100. Значение по умолчанию равно 10.
	 * Transactions per page. Minimal value is 1.
	 * Maximal value is 100.
	 * By default is 10.
	 * 
	 * 
	 * @var int
	 */
	 public $pageSize = null;
	
}
		
/**
 * Данные пользователя в системе МОНЕТА.РУ.
	 * Данные представляются в виде "ключ-значение" и признака подтвержденности.
	 * Можно получить доступ либо к собственным, либо к публично доступным данным
	 * (то есть к тем данным, которые пользователь сам разрешил для просмотра).
	 * Возможные ключи для пользователей с типом "client":
	 * unitid - ID пользователя в системе МОНЕТА.РУ;
	 * last_name - фамилия;
	 * first_name - имя;
	 * middle_initial_name - отчество;
	 * alias - псевдоним;
	 * country - страна;
	 * state - область, республика, штат;
	 * city - город;
	 * zip - индекс;
	 * address - адрес;
	 * email_for_notifications - адрес электронной почты для уведомлений;
	 * im_for_notifications - jabber account для уведомлений;
	 * phone - номер телефона;
	 * cell_phone - номер сотового телефона;
	 * url - url сайта;
	 * sex - пол. MALE - мужской, FEMALE - женский;
	 * date_of_birth - дата рождения (формат - yyyy-mm-dd);
	 * inn - номер ИНН;
	 * timezone - часовой пояс пользователя;
	 * ui_language - язык интерфейса пользователя. RU - руский, EN - английский;
	 * notification_flags:operation - рассылка уведомлений о проведении операций (0-нет, 1-да);
	 * notification_flags:login - рассылка уведомлений о входе в систему
	 * (0-нет, 1-да);
	 * notification_flags:news - подписка на рассылку уведомлений (0-нет, 1-да);
	 * notification_flags:regular_payments - подписка на рассылку уведомлений по регулярным платежам (0-нет, 1-да);
	 * notification_flags:balance_threshold - рассылка уведомлений о пороговых значениях баланса (0-нет, 1-да);
	 * notification_flags_im:operation - рассылка уведомлений о проведении операций (0-нет, 1-да);
	 * notification_flags_im:login - рассылка уведомлений о входе в систему
	 * (0-нет, 1-да);
	 * notification_flags_im:news - подписка на рассылку уведомлений (0-нет, 1-да);
	 * notification_flags_im:regular_payments - подписка на рассылку уведомлений по регулярным платежам (0-нет, 1-да);
	 * notification_flags_im:balance_threshold - рассылка уведомлений о пороговых значениях баланса (0-нет, 1-да);
	 * customfield:* - произвольный набор значений.
	 * В данных пользователя их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * Возможные ключи для пользователей с типом "organization":
	 * unitid - ID пользователя в системе МОНЕТА.РУ;
	 * organization_name - название организации;
	 * alias - псевдоним;
	 * fio_director - ФИО директора;
	 * phone_director - телефон директора;
	 * fio_accountant - ФИО бухгалтера;
	 * phone_accountant - телефон бухгалтера;
	 * legal_address - юридический адрес;
	 * post_address - почтовый адрес;
	 * actual_address - фактический адрес;
	 * url - url сайта;
	 * contact_info - контактная информация;
	 * contact_email - контактный e-mail;
	 * business_activity - вид деятельности;
	 * inn - номер ИНН;
	 * contract_number - номер договора (только для чтения);
	 * contract_date - дата договора (только для чтения);
	 * timezone - часовой пояс пользователя;
	 * ui_language - язык интерфейса пользователя. RU - руский, EN - английский;
	 * notification_flags:operation - рассылка уведомлений о проведении операций (0-нет, 1-да);
	 * notification_flags:login - рассылка уведомлений о входе в систему
	 * (0-нет, 1-да);
	 * notification_flags:news - подписка на рассылку уведомлений (0-нет, 1-да);
	 * notification_flags:regular_payments - подписка на рассылку уведомлений по регулярным платежам (0-нет, 1-да);
	 * notification_flags:balance_threshold - рассылка уведомлений о пороговых значениях баланса (0-нет, 1-да);
	 * notification_flags_im:operation - рассылка уведомлений о проведении операций (0-нет, 1-да);
	 * notification_flags_im:login - рассылка уведомлений о входе в систему
	 * (0-нет, 1-да);
	 * notification_flags_im:news - подписка на рассылку уведомлений (0-нет, 1-да);
	 * notification_flags_im:regular_payments - подписка на рассылку уведомлений по регулярным платежам (0-нет, 1-да);
	 * notification_flags_im:balance_threshold - рассылка уведомлений о пороговых значениях баланса (0-нет, 1-да);
	 * customfield:* - произвольный набор значений.
	 * В данных пользователя их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * User profile information.
	 * Data is presented as key-value pairs list.
	 * Returned attributes are either owned by authenticated user
	 * or marked as publicly available by profile owner.
	 * Possilble keys for "client" profiles:
	 * unitid - structure identificator in MONETA.RU;
	 * last_name;
	 * first_name;
	 * middle_initial_name;
	 * alias;
	 * country;
	 * state;
	 * city;
	 * zip;
	 * address;
	 * email_for_notifications;
	 * im_for_notifications;
	 * phone;
	 * cell_phone;
	 * url;
	 * sex (MALE|FEMALE);
	 * date_of_birth (yyyy-mm-dd format);
	 * inn - Tax ID;
	 * timezone;
	 * ui_language (RU|EN);
	 * notification_flags:operation - transaction notifications (0-don't send, 1-send);
	 * notification_flags:login - loging in notifications (0-don't send, 1-send);
	 * notification_flags:news - news and information notifications (0-don't send, 1-send);
	 * notification_flags:regular_payments - regular payments notifications (0-don't send, 1-send);
	 * notification_flags:balance_threshold - account balance threshold notifications (0-don't send, 1-send);
	 * notification_flags_im:operation - transaction notifications (0-don't send, 1-send);
	 * notification_flags_im:login - loging in notifications (0-don't send, 1-send);
	 * notification_flags_im:news - news and information notifications (0-don't send, 1-send);
	 * notification_flags_im:regular_payments - regular payments notifications (0-don't send, 1-send);
	 * notification_flags_im:balance_threshold - account balance threshold notifications (0-don't send, 1-send);
	 * customfield:* - custom list of values.
	 * User profile may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * Possible keys for "organization" profile:
	 * unitid - structure identificator in MONETA.RU;
	 * organization_name;
	 * alias;
	 * fio_director - Director's Fullname ;
	 * phone_director - Director's phone;
	 * fio_accountant - Accountant's fullname;
	 * phone_accountant - Accountant's phone;
	 * legal_address - official organization address;
	 * post_address - post address;
	 * actual_address - actual address;
	 * url - site url;
	 * contact_info - contact info;
	 * contact_email - contact e-mail;
	 * business_activity - business activity;
	 * inn - Tax ID;
	 * contract_number - contract number;
	 * contract_date - contract date;
	 * timezone - user's time zone;
	 * ui_language (RU|EN);
	 * notification_flags:operation - transaction notifications (0-don't send, 1-send);
	 * notification_flags:login - loging in notifications (0-don't send, 1-send);
	 * notification_flags:news - news and information notifications (0-don't send, 1-send);
	 * notification_flags:regular_payments - regular payments notifications (0-don't send, 1-send);
	 * notification_flags:balance_threshold - account balance threshold notifications (0-don't send, 1-send);
	 * notification_flags_im:operation - transaction notifications (0-don't send, 1-send);
	 * notification_flags_im:login - loging in notifications (0-don't send, 1-send);
	 * notification_flags_im:news - news and information notifications (0-don't send, 1-send);
	 * notification_flags_im:regular_payments - regular payments notifications (0-don't send, 1-send);
	 * notification_flags_im:balance_threshold - account balance threshold notifications (0-don't send, 1-send);
	 * customfield:* - custom list of values.
	 * Organization profile may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * Список идентификаторов временных зон, которые используются в системе, доступен на странице wikipedia.org
	 * Timezone identificators supported in MONETA.RU available as TZ name on wikipedia.org
	 * 
 */	
class MonetaProfile
{
		
	/**
	 * 
	 * 
	 * @var MonetaKeyValueAttribute
	 */
	 public $attribute = null;
	
	/**
	 * 
	 * 
	 * @param MonetaKeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(MonetaKeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}
		
/**
 * Тип, описывающий документ в системе МОНЕТА.РУ
	 * Document information type
	 * 
 */	
class MonetaDocument
{
		
	/**
	 * Идентификатор документа в системе МОНЕТА.РУ
	 * Document identificator in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $id = null;
		
	/**
	 * Тип документа
	 * Document type
	 * 
	 * 
	 * @var string
	 */
	 public $type = null;
		
	/**
	 * Поля документа в системе МОНЕТА.РУ.
	 * Данные представляются в виде "ключ-значение" и признака подтвержденности.
	 * В зависимости от типа документа возвращаются следующие поля:
	 * Для документов типа PASSPORT, MILITARY_ID:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * COMMENTS - комментарии (необязательное поле)
	 * Для документов типа DRIVING_LICENCE:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * EXPIRATIONDATE - срок действия
	 * COMMENTS - комментарии (необязательное поле)
	 * Для OTHER:
	 * COMMENTS - комментарии, пояснения, описание
	 * Для всех типов документов:
	 * customfield:* - произвольный набор значений.
	 * В документе их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * MODIFICATIONDATE - последняя дата редактирования документа
	 * Document attributes in MONETA.RU.
	 * Information is represented by key-value pairs list.
	 * Supported keys depending on document type as follows.
	 * PASSPORT, MILITARY_ID document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * COMMENTS - optional description
	 * DRIVING_LICENCE document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * EXPIRATIONDATE - expiration date
	 * COMMENTS - optional description
	 * OTHER document type:
	 * COMMENTS - name, description, comments or explanation
	 * all document types:
	 * customfield:* - custom list of values.
	 * The document may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * MODIFICATIONDATE - document last modification date
	 * 
	 * 
	 * @var MonetaKeyValueAttribute
	 */
	 public $attribute = null;
	
	/**
	 * Поля документа в системе МОНЕТА.РУ.
	 * Данные представляются в виде "ключ-значение" и признака подтвержденности.
	 * В зависимости от типа документа возвращаются следующие поля:
	 * Для документов типа PASSPORT, MILITARY_ID:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * COMMENTS - комментарии (необязательное поле)
	 * Для документов типа DRIVING_LICENCE:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * EXPIRATIONDATE - срок действия
	 * COMMENTS - комментарии (необязательное поле)
	 * Для OTHER:
	 * COMMENTS - комментарии, пояснения, описание
	 * Для всех типов документов:
	 * customfield:* - произвольный набор значений.
	 * В документе их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * MODIFICATIONDATE - последняя дата редактирования документа
	 * Document attributes in MONETA.RU.
	 * Information is represented by key-value pairs list.
	 * Supported keys depending on document type as follows.
	 * PASSPORT, MILITARY_ID document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * COMMENTS - optional description
	 * DRIVING_LICENCE document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * EXPIRATIONDATE - expiration date
	 * COMMENTS - optional description
	 * OTHER document type:
	 * COMMENTS - name, description, comments or explanation
	 * all document types:
	 * customfield:* - custom list of values.
	 * The document may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * MODIFICATIONDATE - document last modification date
	 * 
	 * 
	 * @param MonetaKeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(MonetaKeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}
	
	/**
	 * Имеет ли документ прикрепленные файлы.
	 * Для получения прикрепленных файлов используйте вызов FindProfileDocumentFilesRequest
	 * If the document has attachments or not.
	 * For attachment fetching see FindProfileDocumentFilesRequest
	 * 
	 * 
	 * @var boolean
	 */
	 public $hasAttachedFiles = null;
	
}
		
/**
 * Тип, описывающий данные в виде бинарного файла.
	 * Binary data type.
	 * 
 */	
class MonetaFile
{
		
	/**
	 * ID документа, которому принадлежит данный файл
	 * Document ID, which file belongs to
	 * 
	 * 
	 * @var long
	 */
	 public $documentId = null;
		
	/**
	 * Данные файла. При передаче/получении данных используйте MTOM (Message Transmission Optimization Mechanism).
	 * File contents. Use MTOM (Message Transmission Optimization Mechanism).
	 * 
	 * 
	 * @var base64Binary
	 */
	 public $blob = null;
		
	/**
	 * Проверен или нет данный файл
	 * Is file approved or not
	 * 
	 * 
	 * @var boolean
	 */
	 public $approved = null;
		
	/**
	 * ID файла
	 * File Id
	 * 
	 * 
	 * @var long
	 */
	 public $fileId = null;
		
	/**
	 * Mime type файла (например: image/jpeg)
	 * File mime type (example: image/jpeg)
	 * 
	 * 
	 * @var string
	 */
	 public $mimeType = null;
		
	/**
	 * Имя файла или описание
	 * File name or description
	 * 
	 * 
	 * @var string
	 */
	 public $title = null;
	
}
		
/**
 * Тип, описывающий делегированный доступ к счету.
	 * Type describing access to delegated account.
	 * 
 */	
class MonetaAccountRelation
{
		
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
		
	/**
	 * Email пользователя, которому предоставляется делегированный доступ к счету.
	 * Email of user which has to be provided with delegated account access.
	 * 
	 * 
	 * @var string
	 */
	 public $principalEmail = null;
		
	/**
	 * Просмотр счета.
	 * View account.
	 * 
	 * 
	 * @var boolean
	 */
	 public $canViewAccount = null;
		
	/**
	 * Редактирование счета.
	 * Edit account.
	 * 
	 * 
	 * @var boolean
	 */
	 public $canEditAccount = null;
		
	/**
	 * Проведение операций.
	 * Process operations.
	 * 
	 * 
	 * @var boolean
	 */
	 public $canProcessOperation = null;
	
}
		
/**
 * Выставление счета к оплате.
	 * Making new invoice (request for payment).
	 * 
 */	
class MonetaInvoiceRequest
{
		
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 * 
	 * @var long
	 */
	 public $payer = null;
		
	/**
	 * Номер счета получателя
	 * Payee account number
	 * 
	 * 
	 * @var long
	 */
	 public $payee = null;
		
	/**
	 * Сумма
	 * Amount
	 * 
	 * 
	 * @var decimal
	 */
	 public $amount = null;
		
	/**
	 * Внешний номер операции
	 * external transaction identificator
	 * 
	 * 
	 * @var string
	 */
	 public $clientTransaction = null;
		
	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $description = null;
		
	/**
	 * Произвольный параметр
	 * Custom parameter
	 * 
	 * 
	 * @var string
	 */
	 public $mnt_custom1 = null;
		
	/**
	 * Произвольный параметр
	 * Custom parameter
	 * 
	 * 
	 * @var string
	 */
	 public $mnt_custom2 = null;
		
	/**
	 * Произвольный параметр
	 * Custom parameter
	 * 
	 * 
	 * @var string
	 */
	 public $mnt_custom3 = null;
		
	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $operationInfo = null;
	
}
		
/**
 * Ответ на выставление счета к оплате.
	 * Invoice registration response.
	 * 
 */	
class MonetaInvoiceResponse extends MonetaTransactionResponseType
{
	
}
		
/**
 * Запрос на перевод денежных средств.
	 * Money Transfer Request.
	 * 
 */	
class MonetaTransferRequest extends MonetaTransactionRequestType
{
	
}
		
/**
 * Ответ на запрос перевода денежных средств.
	 * Money transfer registration response.
	 * 
 */	
class MonetaTransferResponse extends MonetaTransactionResponseType
{
	
}
		
/**
 * Запрос на перевод денежных средств в пакетном режиме.
	 * Money Transfer Request in batch processing mode.
	 * 
 */	
class MonetaTransferBatchRequest extends MonetaTransactionBatchRequestType
{
	
}
		
/**
 * Ответ на запрос перевода денежных средств в пакетном режиме.
	 * Money transfer registration response in batch processing mode.
	 * 
 */	
class MonetaTransferBatchResponse
{
		
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в TransferBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @var MonetaTransactionBatchResponseType
	 */
	 public $transaction = null;
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в TransferBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @param MonetaTransactionBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaTransactionBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Запрос на регистрацию операции с блокировкой средств на счете плательщика.
	 * Завершить (подтвердить) операцию можно с помощью ConfirmTransactionRequest.
	 * Если операция не будет закончена с помощью ConfirmTransactionRequest, то
	 * операция будет отменена автоматически по истечению срока блокировки.
	 * Request for transaction registration and debiting funds from payer's account.
	 * To finish (confirm) this transaction use ConfirmTransactionRequest.
	 * Authorised but not cofirmed transactions are cancelled automaticaly after authorisation expiry.
	 * 
 */	
class MonetaAuthoriseTransactionRequest extends MonetaAuthoriseTransactionRequestType
{
	
}
		
/**
 * Ответ на запрос регистрации операции.
	 * Transaction authorisation response.
	 * 
 */	
class MonetaAuthoriseTransactionResponse extends MonetaOperationInfo
{
	
}
		
/**
 * Запрос на регистрацию операции с блокировкой средств на счете плательщика в пакетном режиме.
	 * Request for transactions registration and debiting funds from payer's account in batch processing mode.
	 * 
 */	
class MonetaAuthoriseTransactionBatchRequest extends MonetaAuthoriseTransactionBatchRequestType
{
	
}
		
/**
 * Ответ на запрос регистрации операций в пакетном режиме.
	 * Transactions authorisation response in batch processing mode.
	 * 
 */	
class MonetaAuthoriseTransactionBatchResponse
{
		
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в AuthoriseTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @var MonetaOperationInfoBatchResponseType
	 */
	 public $transaction = null;
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в AuthoriseTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @param MonetaOperationInfoBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaOperationInfoBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Запрос на завершение (подтверждение) операции.
	 * Transaction confirmation request.
	 * 
 */	
class MonetaConfirmTransactionRequest extends MonetaConfirmTransactionRequestType
{
	
}
		
/**
 * Ответ на запрос завершения операции.
	 * Transaction confirmation response.
	 * 
 */	
class MonetaConfirmTransactionResponse extends MonetaOperationInfo
{
	
}
		
/**
 * Запрос на завершение (подтверждение) операций в пакетном режиме.
	 * Transactions confirmation request in batch processing mode.
	 * 
 */	
class MonetaConfirmTransactionBatchRequest extends MonetaConfirmTransactionBatchRequestType
{
	
}
		
/**
 * Ответ на запрос завершения операций в пакетном режиме.
	 * Transactions confirmation response in batch processing mode.
	 * 
 */	
class MonetaConfirmTransactionBatchResponse
{
		
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в ConfirmTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @var MonetaOperationInfoBatchResponseType
	 */
	 public $transaction = null;
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в ConfirmTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @param MonetaOperationInfoBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaOperationInfoBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Запрос на отмену операции. Отменять операцию можно при выполнении всех условий:
	 * незавершенные операции;
	 * если есть доступ к счету плательщика и счету получателя (то есть свои внутренние операции).
	 * Transaction cancelation request if transasction fulfils following conditions:
	 * transaction is in processing (incompleted);
	 * principal has an access to both (payer and payee) accounts.
	 * 
 */	
class MonetaCancelTransactionRequest extends MonetaCancelTransactionRequestType
{
	
}
		
/**
 * Ответ на запрос CancelTransactionRequest.
	 * Transaction cancelation response.
	 * 
 */	
class MonetaCancelTransactionResponse extends MonetaCancelTransactionResponseType
{
	
}
		
/**
 * Запрос на отмену операций в пакетном режиме.
	 * Transactions cancelation request in batch processing mode.
	 * 
 */	
class MonetaCancelTransactionBatchRequest extends MonetaCancelTransactionBatchRequestType
{
	
}
		
/**
 * Ответ на запрос CancelTransactionBatchRequest.
	 * Transactions cancelation response in batch processing mode.
	 * 
 */	
class MonetaCancelTransactionBatchResponse
{
		
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в CancelTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @var MonetaCancelTransactionBatchResponseType
	 */
	 public $transaction = null;
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в CancelTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 * 
	 * @param MonetaCancelTransactionBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(MonetaCancelTransactionBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}
		
/**
 * Возврат средств по указанной операции.
	 * Refund given transaction.
	 * 
 */	
class MonetaRefundRequest
{
		
	/**
	 * Номер операции в системе МОНЕТА.РУ, по которой необходимо вернуть деньги
	 * Transaction ID in Moneta.ru
	 * 
	 * 
	 * @var long
	 */
	 public $transactionId = null;
		
	/**
	 * Сумма, которую необходимо возвратить.
	 * Если сумма не указана, то сумма для возврата берется из указанной операции.
	 * Необязательное поле.
	 * Amount to refund in source transaction payee's currency.
	 * If omitted the source transaction payees' amount is used.
	 * Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $amount = null;
		
	/**
	 * Платежный пароль
	 * Payment password for payer account
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $paymentPassword = null;
		
	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 * 
	 * @var string
	 */
	 public $clientTransaction = null;
		
	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $description = null;
		
	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $operationInfo = null;
		
	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 * 
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;
	
}
		
/**
 * Ответ по запросу возврата средств, содержащий информацию по возвратной операции.
	 * Response containing refund transaction information.
	 * 
 */	
class MonetaRefundResponse extends MonetaOperationInfo
{
	
}
		
/**
 * Запрос предварительного расчета сумм и комиссий по параметрам операции.
	 * Request for amount and fee preliminary calculation by transaction parameters.
	 * 
 */	
class MonetaForecastTransactionRequest extends MonetaTransactionRequestType
{
	
}
		
/**
 * Ответ на запрос предварительного расчета сумм и комиссий.
	 * Может использоваться для информирования пользователя о приблизительной сумме и комиссии
	 * операции.
	 * Фактические значения могут отличаться, если к моменту проведения операции
	 * доступны новые правила тарификации или новые курсы обмена валют.
	 * Response for preliminary calculation request.
	 * May be used for informing users with approximate amount and fee of transaction.
	 * Actual values may differ if newer financial rules and currency exchange rates
	 * are available at the moment of transaction processing.
	 * 
 */	
class MonetaForecastTransactionResponse extends MonetaForecastTransactionResponseType
{
	
}
		
/**
 * Запрос возможности провести операцию в системе МОНЕТА.РУ.
	 * Transaction verification request.
	 * 
 */	
class MonetaVerifyTransactionRequest
{
		
	/**
	 * Идентификатор операции в системе МОНЕТА.РУ, которую надо проверить.
	 * The identifier of transaction which has to be verified.
	 * 
	 * 
	 * @var long
	 */
	 public $transactionId = null;
		
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 * 
	 * @var long
	 */
	 public $payer = null;
		
	/**
	 * Сумма операции.
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету плательщика,
	 * то интерпретируется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету получателя,
	 * то интерпретируется как сумма к зачислению (в валюте получателя).
	 * Transaction amount.
	 * If isPayerAmount is omitted
	 * and user has access only to payer account,
	 * then is interpreted as debit amount (in payer's currency).
	 * If isPayerAmount is omitted
	 * and user has access only to payee account,
	 * then is interpreted as credit amount (in payee's currency).
	 * 
	 * 
	 * @var decimal
	 */
	 public $amount = null;
		
	/**
	 * Если пользователь имеет доступ как к счету плательщика, так и счету получателя,
	 * то флаг isPayerAmount обязателен.
	 * Если флаг isPayerAmount установлен (true), то amount используется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount сброшен (false), то amount используется как сумма к зачислению (в валюте получателя).
	 * If user has access to both accounts, then isPayerAmount flag is obligatory.
	 * If isPayerAmount flag is "true", then amount is used as debit amount (in payer's currency).
	 * If isPayerAmount flag is "false", then amount is used as credit amount (in payee's currency).
	 * 
	 * 
	 * @var boolean
	 */
	 public $isPayerAmount = null;
		
	/**
	 * Набор полей, которые необходимо использовать в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be used as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $operationInfo = null;
	
}
		
/**
 * Ответ на запрос проверки проведения операции в системе МОНЕТА.РУ
	 * Transaction verification response.
	 * 
 */	
class MonetaVerifyTransactionResponse extends MonetaVerifyTransferResponseType
{
		
	/**
	 * Идентификатор операции в системе МОНЕТА.РУ.
	 * The identifier of transaction.
	 * 
	 * 
	 * @var long
	 */
	 public $transactionId = null;
		
	/**
	 * Статус операции в системе МОНЕТА.РУ.
	 * Transaction status type in MONETA.RU
	 * 
	 * 
	 * @var string
	 */
	 public $operationStatus = null;
	
}
		
/**
 * Запрос возможности провести операцию в системе МОНЕТА.РУ.
	 * Transaction verification request.
	 * 
 */	
class MonetaVerifyTransferRequest extends MonetaTransactionRequestType
{
	
}
		
/**
 * Ответ на запрос проверки проведения операции в системе МОНЕТА.РУ
	 * Transaction verification response.
	 * 
 */	
class MonetaVerifyTransferResponse extends MonetaVerifyTransferResponseType
{
	
}
		
/**
 * Ответ, который приходит на запрос FindAccountByIdRequest.
	 * В ответе содержится информация по счету.
	 * Account searching by account number response.
	 * Response contains Account information.
	 * 
 */	
class MonetaFindAccountByIdResponse
{
		
	/**
	 * 
	 * 
	 * @var MonetaAccountInfo
	 */
	 public $account = null;
	
}
		
/**
 * Ответ, который приходит на запрос FindAccountByAliasRequest.
	 * В ответе содержится информация по счету.
	 * Account searching by account alias response.
	 * Response contains Account information.
	 * 
 */	
class MonetaFindAccountByAliasResponse
{
		
	/**
	 * 
	 * 
	 * @var MonetaAccountInfo
	 */
	 public $account = null;
	
}
		
/**
 * Запрос на получение списка счетов по заданным условиям поиска.
	 * Accounts searching by given filter.
	 * 
 */	
class MonetaFindAccountsListRequest
{
		
	/**
	 * Пользователь, которому принадлежат счета.
	 * Если это поле не задано, то используется текущий пользователь.
	 * Необязательное поле.
	 * Structure element, where accounts belong to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
		
	/**
	 * Название счета. Поиск происходит по прямому совпадению.
	 * Для задания маски можно указать спец-символы "*" или "?".
	 * Необязательное поле.
	 * Alias of account. Wildcards "*" and "?" may be used.
	 * Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $alias = null;
		
	/**
	 * Валюта счета. Необязательное поле.
	 * Currency of account. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $currency = null;
		
	/**
	 * Является ли счет делегированным. Необязательное поле.
	 * - поле не указано - выбрать все счета
	 * - false - выбрать только неделегированные счета
	 * - true - выбрать только делегированные счета
	 * The boolean flag indicating if account is deligated. Optional.
	 * - select all accounts if omitted
	 * - false - select only non-delegated (owned) accounts
	 * - true - select only delegated accounts
	 * 
	 * 
	 * @var boolean
	 */
	 public $isDelegatedAccount = null;
	
}
		
/**
 * Ответ, который содержит список счетов.
	 * Accounts searching response containing the list of accounts.
	 * 
 */	
class MonetaFindAccountsListResponse
{
		
	/**
	 * 
	 * 
	 * @var MonetaAccountInfo
	 */
	 public $account = null;
	
	/**
	 * 
	 * 
	 * @param MonetaAccountInfo
	 *
	 * @return void
	 */
	public function addAccount(MonetaAccountInfo $item)
	{
		$this->account[] = $item;
	}

}
		
/**
 * Получить запрос для платежного пароля
	 * Receive challenge for payment password
	 * 
 */	
class MonetaGetAccountPaymentPasswordChallengeRequest
{
		
	/**
	 * Номер счета
	 * Account number
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
	
}
		
/**
 * Ответ содержит строку запроса для платежного пароля
	 * Response contains of challenge string for payment password
	 * 
 */	
class MonetaGetAccountPaymentPasswordChallengeResponse
{
		
	/**
	 * Запрос для платежного пароля
	 * Challenge of payment password
	 * 
	 * 
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;
	
}
		
/**
 * Запрос на создание счета.
	 * Счет создается для указанного пользователя или,
	 * если это поле не указано, - для текущего пользователя.
	 * Account creation request.
	 * Account is created for given structure element (unitId)
	 * or for authenticated user's structure if unitId is omitted.
	 * 
 */	
class MonetaCreateAccountRequest
{
		
	/**
	 * Валюта счета
	 * Currency of account
	 * 
	 * 
	 * @var string
	 */
	 public $currency = null;
		
	/**
	 * Название счета.
	 * Название счета должно быть уникальным среди счетов одного пользователя.
	 * Необязательное поле.
	 * Alias of account.
	 * Must be unique among accounts of given user.
	 * Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $alias = null;
		
	/**
	 * Платежный пароль. Минимальная длина - 5 символов
	 * Payment password. Minimum length is 5 symbols.
	 * 
	 * 
	 * @var string
	 */
	 public $paymentPassword = null;
		
	/**
	 * Пользователь, которому будет принадлежать данный счет.
	 * Если это поле не задано, то счет создается для текущего пользователя.
	 * Необязательное поле.
	 * Structure element, where the account belongs to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
		
	/**
	 * URL после списания средств. Необязательное поле.
	 * URL on debiting. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onSuccessfulDebitUrl = null;
		
	/**
	 * URL после зачисления средств. Необязательное поле.
	 * URL on crediting. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onSuccessfulCreditUrl = null;
		
	/**
	 * Код проверки целостности данных. Необязательное поле.
	 * Mandatory payment form signature. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $signature = null;
		
	/**
	 * Если баланс счета меньше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is less than threshold. Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $lowBalanceThreshold = null;
		
	/**
	 * Если баланс счета больше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is greater than threshold. Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $highBalanceThreshold = null;
		
	/**
	 * Счет-прототип с которого берутся свойства "по умолчанию". Необязательное поле.
	 * Prototype account for default properties values. Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $prototypeAccountId = null;
		
	/**
	 * URL после отмены списания средств. Необязательное поле.
	 * URL on cancelled debit. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onCancelledDebitUrl = null;
		
	/**
	 * URL после отмены зачисления средств. Необязательное поле.
	 * URL on cancelled credit. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onCancelledCreditUrl = null;
	
}
		
/**
 * Запрос на редактирование счета.
	 * У счета можно изменить свойства "псевдоним" и "платежный пароль".
	 * Account modification request.
	 * It's allowed to change alias and payment password for account.
	 * 
 */	
class MonetaEditAccountRequest
{
		
	/**
	 * Идентификатор редактируемого счета.
	 * Modifying account's number.
	 * 
	 * 
	 * @var long
	 */
	 public $id = null;
		
	/**
	 * Новый псевдоним счета.
	 * Псевдоним счета должен быть уникальным среди счетов пользователя.
	 * Необязательное поле.
	 * New alias of account.
	 * Must be unique among accounts of given user.
	 * Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $alias = null;
		
	/**
	 * Новый платежный пароль. Для того чтобы изменить платежный
	 * пароль, необходимо указать предыдущий платежный пароль. Необязательное поле.
	 * New payment password for account.
	 * oldPaymentPassword is required to set new payment password.
	 * Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $paymentPassword = null;
		
	/**
	 * Текущий платежный пароль. Для того чтобы изменить платежный
	 * пароль на новый, необходимо указать текущий платежный пароль. Необязательное поле.
	 * Current payment password.
	 * Used for authorization of changing payment password to new value.
	 * Required only if newPaymentPassword is specified.
	 * Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $oldPaymentPassword = null;
		
	/**
	 * URL после списания средств. Необязательное поле.
	 * URL on debiting. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onSuccessfulDebitUrl = null;
		
	/**
	 * URL после зачисления средств. Необязательное поле.
	 * URL on crediting. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onSuccessfulCreditUrl = null;
		
	/**
	 * Код проверки целостности данных. Необязательное поле.
	 * Mandatory payment form signature. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $signature = null;
		
	/**
	 * Если баланс счета меньше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is less than threshold. Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $lowBalanceThreshold = null;
		
	/**
	 * Если баланс счета больше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is greater than threshold. Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $highBalanceThreshold = null;
		
	/**
	 * Счет-прототип с которого берутся свойства "по умолчанию". Необязательное поле.
	 * Prototype account for default properties values. Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $prototypeAccountId = null;
		
	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 * 
	 * @var string
	 */
	 public $oldPaymentPasswordChallenge = null;
		
	/**
	 * URL после отмены списания средств. Необязательное поле.
	 * URL on cancelled debit. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onCancelledDebitUrl = null;
		
	/**
	 * URL после отмены зачисления средств. Необязательное поле.
	 * URL on cancelled credit. Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $onCancelledCreditUrl = null;
	
}
		
/**
 * Ответ, который приходит на запрос EditAccountRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения счета произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит счет гарантированно сохранен.
	 * Account modification response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then account is modified successfully.
	 * 
 */	
class MonetaEditAccountResponse
{
	
}
		
/**
 * Ответ на запрос получения информации по операции.
	 * Transaction information response.
	 * 
 */	
class MonetaGetOperationDetailsByIdResponse
{
		
	/**
	 * 
	 * 
	 * @var MonetaOperationInfo
	 */
	 public $operation = null;
	
}
		
/**
 * Запрос на получение данных по внешнему номеру операции
	 * (номеру не в системе МОНЕТА.РУ).
	 * По внешнему номеру операции может быть найдено несколько операций
	 * в системе МОНЕТА.РУ. Поэтому операции возвращаются списком,
	 * разбитым на страницы. Размером страницы можно управлять через
	 * поле pager.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Transaction searching by external transaction ID.
	 * As a result more than one transaction may be found.
	 * Transaction list is paged.
	 * Response element "size" is 0 if no data found.
	 * 
 */	
class MonetaFindOperationsListByCTIDRequest
{
		
	/**
	 * Настройки страницы данных.
	 * Необязательное поле.
	 * Long list retrieval settings.
	 * Optional.
	 * 
	 * 
	 * @var MonetaPager
	 */
	 public $pager = null;
		
	/**
	 * Номер счета в системе МОНЕТА.РУ
	 * Account number in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
		
	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 * 
	 * @var string
	 */
	 public $clientTransaction = null;
	
}
		
/**
 * Ответ на запрос FindOperationsListByCTIDRequest.
	 * В результате возвращается список операций, разбитый по страницам.
	 * Transaction searching by external transaction ID response.
	 * Result contains paged transaction list.
	 * 
 */	
class MonetaFindOperationsListByCTIDResponse extends MonetaOperationInfoList
{
	
}
		
/**
 * Фильтр, по которому ищем операции.
	 * Transactions filter.
	 * 
 */	
class MonetaFindOperationsListRequestFilter
{
		
	/**
	 * ID пользователя в системе МОНЕТА.РУ
	 * Structure identificator in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
		
	/**
	 * Номер счета
	 * Account number
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
		
	/**
	 * Дата начала периода
	 * Period's start
	 * 
	 * 
	 * @var dateTime
	 */
	 public $dateFrom = null;
		
	/**
	 * Дата конца периода
	 * Period's end
	 * 
	 * 
	 * @var dateTime
	 */
	 public $dateTo = null;
		
	/**
	 * Номер операции в системе МОНЕТА.РУ
	 * Transaction ID in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $operationId = null;
		
	/**
	 * Сумма от... Ищутся все операции, которые проходили
	 * на большую или равную сумму. Если указано это поле, то обязательно надо
	 * заполнить Currency
	 * Minimal transaction amount.
	 * If specified currencyCode filter parameter is required.
	 * 
	 * 
	 * @var decimal
	 */
	 public $amountFrom = null;
		
	/**
	 * Сумма до... Ищутся все операции, которые проходили
	 * на меньшую или равную сумму. Если указано это поле, то обязательно надо
	 * заполнить Currency
	 * Maximal transaction amount.
	 * If specified currencyCode filter parameter is required.
	 * 
	 * 
	 * @var decimal
	 */
	 public $amountTo = null;
		
	/**
	 * Валюта, по которой проходили операции
	 * Currency of transaction account.
	 * 
	 * 
	 * @var string
	 */
	 public $currencyCode = null;
		
	/**
	 * Корреспонденский номер счета в системе МОНЕТА.РУ
	 * Correspondent account number in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $targetAccountId = null;
		
	/**
	 * Статус операции
	 * Transaction status
	 * 
	 * 
	 * @var string
	 */
	 public $operationStatus = null;
		
	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 * 
	 * @var string
	 */
	 public $clientTransaction = null;
		
	/**
	 * 1 - все операции;
	 * 2 - операции, где деньги были получены (сумма > 0);
	 * 3 - операции, где деньги были потрачены (сумма < 0).
	 * 1 - all transactions;
	 * 2 - credit transactions;
	 * 3 - debit transactions.
	 * 
	 * 
	 * @var int
	 */
	 public $operationAmountTypeId = null;
		
	/**
	 * Название свойства операции. Может принимать следующие значения:
	 * YANDEXACCOUNT - счет в системе Яндекс.Деньги;
	 * WEBMONEYWMID - WebMoney WMID;
	 * WEBMONEYPURSE - WebMoney кошелек;
	 * CONTACTTRANSFERORDERNUMBER - Номер перевода в системе Contact;
	 * WIRETRANSFERORDERNUMBER - Номер платежного поручения в банковском переводе;
	 * Значение свойства указывается в поле propertyValue.
	 * The transaction property name may take following values:
	 * YANDEXACCOUNT - user's account number in Yandex.Money;
	 * WEBMONEYWMID - user's WMID in WebMoney;
	 * WEBMONEYPURSE - user's purse number in WebMoney;
	 * CONTACTTRANSFERORDERNUMBER - transfer idenitification number in Contact;
	 * WIRETRANSFERORDERNUMBER - bank transfer identification number.
	 * The value of property has to be specified in "propertyValue" element.
	 * 
	 * 
	 * @var string
	 */
	 public $propertyName = null;
		
	/**
	 * Значение свойства операции.
	 * Поиск происходит по прямому совпадению. Для задания маски
	 * можно указать спец-символы - "*" или "?".
	 * Transaction property value.
	 * Wildcards "*" and "?" may be used.
	 * 
	 * 
	 * @var string
	 */
	 public $propertyValue = null;
		
	/**
	 * 1 - Ввод средств;
	 * 2 - Вывод средств;
	 * 3 - Внутренний перевод;
	 * 4 - Товары и услуги.
	 * 1 - Deposit;
	 * 2 - Withdrawal;
	 * 3 - Transfer;
	 * 4 - Goods and services.
	 * 
	 * 
	 * @var long
	 */
	 public $operationCategoryId = null;
	
}
		
/**
 * Запрос на получение списка операций по заданному фильтру.
	 * Обязательными в фильтре являются только поля с датами периода.
	 * Все остальные поля в фильтре необязательные.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Transaction searching by given filter.
	 * Filter requires date period values to be set.
	 * Other parameters are optional.
	 * Response element "size" is 0 if no data found.
	 * 
 */	
class MonetaFindOperationsListRequest
{
		
	/**
	 * Настройки страницы данных. Необязательное поле.
	 * Paging settings. Optional.
	 * 
	 * 
	 * @var MonetaPager
	 */
	 public $pager = null;
		
	/**
	 * Фильтр, по которому ищем операции.
	 * Transactions filter.
	 * 
	 * 
	 * @var MonetaFindOperationsListRequestFilter
	 */
	 public $filter = null;
	
}
		
/**
 * Ответ на запрос FindOperationsListRequest.
	 * В результате возвращается список операций, разбитый по страницам.
	 * Transaction searching response.
	 * Result contains paged transactions list.
	 * 
 */	
class MonetaFindOperationsListResponse extends MonetaOperationInfoList
{
	
}
		
/**
 * Запрос на получение списка последних операций.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Last transactions searching.
	 * Response element "size" is 0 if no data found.
	 * 
 */	
class MonetaFindLastOperationsListRequest
{
		
	/**
	 * ID пользователя в системе МОНЕТА.РУ.
	 * Если это поле не задано, то используется текущий пользователь.
	 * Необязательное поле.
	 * Structure identificator in MONETA.RU.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
		
	/**
	 * Количество операций. Необязательное поле.
	 * Transactions quantity. Optional.
	 * 
	 * 
	 * @var int
	 */
	 public $transactionsQuantity = null;
	
}
		
/**
 * Ответ на запрос FindLastOperationsListRequest.
	 * В результате возвращается список последних операций.
	 * Transaction searching response.
	 * Result contains last transactions list.
	 * 
 */	
class MonetaFindLastOperationsListResponse extends MonetaOperationInfoList
{
	
}
		
/**
 * Ответ на запрос FindProfileInfoByAccountIdRequest.
	 * Profile information by account number searching response.
	 * 
 */	
class MonetaFindProfileInfoByAccountIdResponse
{
		
	/**
	 * Номер счета пользователя в системе МОНЕТА.РУ
	 * Account number in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
		
	/**
	 * Валюта счета
	 * Currency of account
	 * 
	 * 
	 * @var string
	 */
	 public $currency = null;
		
	/**
	 * Данные пользователя в системе МОНЕТА.РУ
	 * User profile information in MONETA.RU
	 * 
	 * 
	 * @var MonetaProfile
	 */
	 public $profile = null;
	
}
		
/**
 * Запрос на создание пользователя в системе МОНЕТА.РУ.
	 * New user registration request.
	 * 
 */	
class MonetaCreateProfileRequest
{
		
	/**
	 * ID родительского пользователя в системе МОНЕТА.РУ, к которому будет принадлежать
	 * создаваемый пользователь. Необязательное поле. Если поле не задано,
	 * то пользователь будет принадлежать тому пользователю, от имени
	 * которого работает web service.
	 * Structure ID in MONETA.RU.
	 * If ommited then authenticated user's structure ID is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
		
	/**
	 * Тип пользователя - "client" или "organization"
	 * Profile type. See also ProfileType description.
	 * 
	 * 
	 * @var string
	 */
	 public $profileType = null;
		
	/**
	 * Данные создаваемого пользователя. Данные представлены в виде "ключ-значение".
	 * Ключи данных зависят от типа пользователя (ProfileType)
	 * User profile information in key-value pairs list.
	 * Supported keys depend on ProfileType.
	 * 
	 * 
	 * @var MonetaProfile
	 */
	 public $profile = null;
	
}
		
/**
 * Запрос на редактирование данных пользователя в системе МОНЕТА.РУ.
	 * Profile information modification request.
	 * 
 */	
class MonetaEditProfileRequest
{
		
	/**
	 * ID пользователя в системе МОНЕТА.РУ, данные которого надо отредактировать.
	 * Structure ID of profile for modification.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
		
	/**
	 * Данные редактируемого пользователя. Данные представлены в виде "ключ-значение".
	 * Ключи данных зависят от типа редактируемого пользователя (client или organization)
	 * User profile information in key-value pairs list.
	 * Supported keys depend on ProfileType.
	 * 
	 * 
	 * @var MonetaProfile
	 */
	 public $profile = null;
	
}
		
/**
 * Ответ, который приходит на запрос EditProfileRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения пользователя произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит пользователь гарантированно сохранен.
	 * Profile modification response.
	 * Response contains no data unless error has occured while saving information
	 * and Exception returned as a result.
	 * 
 */	
class MonetaEditProfileResponse
{
	
}
		
/**
 * Запрос на получение данных пользователя по ID пользователя.
	 * Если данные не найдены, возникает Exception.
	 * Request for profile information by structure ID.
	 * Exception is thrown if no data found.
	 * 
 */	
class MonetaGetProfileInfoRequest
{
		
	/**
	 * ID пользователя в системе МОНЕТА.РУ.
	 * Если это поле не задано, то используется текущий пользователь.
	 * Необязательное поле.
	 * Structure ID.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
	
}
		
/**
 * Ответ на запрос GetProfileInfoRequest.
	 * Profile information by structure ID searching response.
	 * 
 */	
class MonetaGetProfileInfoResponse extends MonetaProfile
{
	
}
		
/**
 * Фильтр, по которому ищем данные
	 * Searching filter
	 * 
 */	
class MonetaFindProfileInfoRequestFilter
{
		
	/**
	 * ID пользователя в системе МОНЕТА.РУ. Необязательное поле. ID пользователя "от которого"
	 * начинается поиск. Если это поле не задано, то ищем пользователей, начиная
	 * от идентифицированного пользователя.
	 * Structure ID of root where searching starts from.
	 * If ommited then authenticated user's structure ID is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
		
	/**
	 * Имя, по которому происходит поиск. Необязательное поле. Если поле задано,
	 * то оно должно быть не меньше 2-х символов.
	 * Поиск происходит по прямому совпадению. Для задания маски
	 * можно указать спец-символы - "*" или "?".
	 * Для пользователей с типом "organization" поиск происходит по
	 * полю "organization_name". Для пользователей с типом "client" -
	 * по общему полю "last_name first_name middle_initial_name".
	 * То есть, если нужно найти пользователя "Иванов Андрей Сергеевич",
	 * то следует ввести имя для поиска именно так. Если нужно найти всех
	 * пользователей с фамилией "Иванов", то запрос должен быть "Иванов*".
	 * Если нужно найти всех пользователей с именем "Андрей", то запрос
	 * должен быть "*Андрей*".
	 * Name to search for. Optional.
	 * If specified must be not shorter than 2 symbols.
	 * Wildcards "*" and "?" may be used.
	 * For "organization" profiles "organization_name" is matched.
	 * For "client" profiles "last_name first_name middle_initial_name" is matched.
	 * 
	 * 
	 * @var string
	 */
	 public $name = null;
		
	/**
	 * Email, по которому происходит поиск. Необязательное поле. Если поле задано,
	 * то оно должно быть не меньше 2-х символов.
	 * Поиск происходит по прямому совпадению. Для задания маски
	 * можно указать спец-символы - "*" или "?".
	 * Email to search for. Optional.
	 * If specified must be not shorted than 2 symbols.
	 * Wildcards "*" and "?" may be used.
	 * 
	 * 
	 * @var string
	 */
	 public $email = null;
		
	/**
	 * Возвращаются пользователи у которых есть счета с балансом
	 * большим или равным указанному значению.
	 * Необязательное поле.
	 * Only profiles with greater or equal account's balance are returned.
	 * Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $accountBalanceFrom = null;
		
	/**
	 * Возвращаются пользователи у которых есть счета с балансом
	 * меньшим или равным указанному значению.
	 * Необязательное поле.
	 * Only profiles with less or equal account's balance are returned.
	 * Optional.
	 * 
	 * 
	 * @var decimal
	 */
	 public $accountBalanceTo = null;
		
	/**
	 * При указании границ баланса в поиске можно уточнить валюту счета.
	 * Необязательное поле.
	 * If balance limits are specified only accounts with given currency will be analysed.
	 * Optional.
	 * 
	 * 
	 * @var string
	 */
	 public $accountCurrencyCode = null;
	
}
		
/**
 * Поиск пользователя в системе МОНЕТА.РУ по заданному фильтру.
	 * В результате возвратится список пользователей, разбитый на страницы
	 * Profile searching by filter parameters.
	 * Result contains paged profile list.
	 * 
 */	
class MonetaFindProfileInfoRequest
{
		
	/**
	 * Настройки страницы данных. Необязательное поле.
	 * Paging settings. Optional.
	 * 
	 * 
	 * @var MonetaPager
	 */
	 public $pager = null;
		
	/**
	 * Фильтр, по которому ищем данные
	 * Searching filter
	 * 
	 * 
	 * @var MonetaFindProfileInfoRequestFilter
	 */
	 public $filter = null;
	
}
		
/**
 * Ответ, который приходит на запрос FindProfileInfoRequest.
	 * Данные в ответе разбиты по страницам.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Profile searching response.
	 * Result is paged.
	 * Response element "size" is 0 if no data found.
	 * 
 */	
class MonetaFindProfileInfoResponse
{
		
	/**
	 * Количество пользователей, возвращаемых в результате запроса.
	 * Profiles per page.
	 * 
	 * 
	 * @var long
	 */
	 public $pageSize = null;
		
	/**
	 * Номер текущей страницы. Нумерация начинается с 1
	 * Current page number starting from 1.
	 * 
	 * 
	 * @var long
	 */
	 public $pageNumber = null;
		
	/**
	 * Сколько всего страниц с пользователями возможно по данному
	 * запросу
	 * Total count of pages.
	 * 
	 * 
	 * @var long
	 */
	 public $pagesCount = null;
		
	/**
	 * Размер текущей страницы. Он всегда <= pageSize. На последней
	 * странице может быть < pageSize
	 * Profiles count in current page.
	 * 
	 * 
	 * @var long
	 */
	 public $size = null;
		
	/**
	 * Общее количество пользователей, которое можно получить в данной
	 * выборке
	 * Total profiles count matched by searching filter.
	 * 
	 * 
	 * @var long
	 */
	 public $totalSize = null;
		
	/**
	 * Список пользователей
	 * Profile list
	 * 
	 * 
	 * @var MonetaProfile
	 */
	 public $profile = null;
	
	/**
	 * Список пользователей
	 * Profile list
	 * 
	 * 
	 * @param MonetaProfile
	 *
	 * @return void
	 */
	public function addProfile(MonetaProfile $item)
	{
		$this->profile[] = $item;
	}

}
		
/**
 * Запрос на получение бинарных данных, ассоциированных с указанным документом.
	 * Request for binary data associated with given document.
	 * 
 */	
class MonetaFindProfileDocumentFilesRequest
{
		
	/**
	 * 
	 * 
	 * @var long
	 */
	 public $documentId = null;
	
}
		
/**
 * Ответ, содержащий бинарные данные, ассоциированные с указанным в запросе документом.
	 * Response containing binary data associated with document given in request.
	 * 
 */	
class MonetaFindProfileDocumentFilesResponse
{
		
	/**
	 * 
	 * 
	 * @var MonetaFile
	 */
	 public $file = null;
	
	/**
	 * 
	 * 
	 * @param MonetaFile
	 *
	 * @return void
	 */
	public function addFile(MonetaFile $item)
	{
		$this->file[] = $item;
	}

}
		
/**
 * Запрос на создание/редактирование файла документа
	 * Request for file adding/modification.
	 * 
 */	
class MonetaUploadProfileDocumentFileRequest
{
		
	/**
	 * Если указано поле fileId - файл редактируется, иначе создается новый файл.
	 * Поле approved в данном запросе не используется.
	 * Если не указан mimeType, но в запросе есть имя файла (поле title), то mimeType будет вычисляться по расширению файла
	 * Specify "fileId" to modify file, omit "fileId" to add new file.
	 * Approved is not used.
	 * If "mimeType" omitted and "title" is specified, "mimeType" will be resolved by filename extension.
	 * 
	 * 
	 * @var MonetaFile
	 */
	 public $file = null;
	
}
		
/**
 * Ответ на запрос создания/редактирования файла документа
	 * Если в процессе сохранения файла произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит файл гарантированно сохранен.
	 * Response for file adding/modification.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then file is uploaded successfully.
	 * 
 */	
class MonetaUploadProfileDocumentFileResponse
{
	
}
		
/**
 * Запрос на получение документов пользователя.
	 * Profile's documents retrieval request.
	 * 
 */	
class MonetaFindProfileDocumentsRequest
{
		
	/**
	 * ID пользователя, документы которого запрашиваются.
	 * Structure ID containing documents.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
	
}
		
/**
 * Ответ на запрос FindProfileDocumentsRequest.
	 * Profile's documents retrieval response.
	 * 
 */	
class MonetaFindProfileDocumentsResponse
{
		
	/**
	 * Список найденных документов. Если документов нет - список пустой.
	 * Found documents list. Empty if no documents are found.
	 * 
	 * 
	 * @var MonetaDocument
	 */
	 public $document = null;
	
	/**
	 * Список найденных документов. Если документов нет - список пустой.
	 * Found documents list. Empty if no documents are found.
	 * 
	 * 
	 * @param MonetaDocument
	 *
	 * @return void
	 */
	public function addDocument(MonetaDocument $item)
	{
		$this->document[] = $item;
	}

}
		
/**
 * Запрос на создание документа пользователя.
	 * Profile's document registration request.
	 * 
 */	
class MonetaCreateProfileDocumentRequest extends MonetaDocument
{
		
	/**
	 * Пользователь, которому будет принадлежать данный документ.
	 * Если это поле не задано, то документ создается для текущего пользователя.
	 * Необязательное поле.
	 * Structure element, where the document belongs to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
	
}
		
/**
 * Ответ на запрос создания документа в профайле.
	 * Profile's document registration response.
	 * $
	 * 
 */	
class MonetaCreateProfileDocumentResponse
{
		
	/**
	 * Идентификатор документа в системе МОНЕТА.РУ
	 * Document identificator in MONETA.RU
	 * 
	 * 
	 * @var long
	 */
	 public $id = null;
	
}
		
/**
 * Запрос на редактирование документа пользователя.
	 * Profile's document modification request.
	 * 
 */	
class MonetaEditProfileDocumentRequest extends MonetaDocument
{
		
	/**
	 * Пользователь, которому принадлежит данный документ.
	 * Если это поле не задано, то документ ищется для текущего пользователя.
	 * Необязательное поле.
	 * Structure element, where the document belongs to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 * 
	 * @var long
	 */
	 public $unitId = null;
	
}
		
/**
 * Ответ, который приходит на запрос EditProfileDocumentRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения документа произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит документ гарантированно сохранен.
	 * Document modification response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then document is modified successfully.
	 * 
 */	
class MonetaEditProfileDocumentResponse
{
	
}
		
/**
 * Запрос на получение списка пользователей, которые имеют делегированный доступ к указанному счету.
	 * Request to find delegated users for specified account ID.
	 * 
 */	
class MonetaFindAccountRelationsRequest
{
		
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
	
}
		
/**
 * Ответ на запрос FindAccountRelationsRequest.
	 * Response containing the list of delegated users.
	 * 
 */	
class MonetaFindAccountRelationsResponse
{
		
	/**
	 * Список найденных пользователей, которые имеют делегированный доступ к указанному счету. Если пользователей нет - список пустой.
	 * List of found users having delegated account access. The list is empty if no users are found.
	 * 
	 * 
	 * @var MonetaAccountRelation
	 */
	 public $accountRelation = null;
	
	/**
	 * Список найденных пользователей, которые имеют делегированный доступ к указанному счету. Если пользователей нет - список пустой.
	 * List of found users having delegated account access. The list is empty if no users are found.
	 * 
	 * 
	 * @param MonetaAccountRelation
	 *
	 * @return void
	 */
	public function addAccountRelation(MonetaAccountRelation $item)
	{
		$this->accountRelation[] = $item;
	}

}
		
/**
 * Запрос на получение данных по делегированному доступу.
	 * Request for delegated access details.
	 * 
 */	
class MonetaGetAccountRelationRequest
{
		
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
		
	/**
	 * Email пользователя.
	 * User's Email.
	 * 
	 * 
	 * @var string
	 */
	 public $principalEmail = null;
	
}
		
/**
 * Ответ на запрос GetAccountRelationRequest.
	 * Response containing detailed information for delegated access.
	 * 
 */	
class MonetaGetAccountRelationResponse
{
		
	/**
	 * 
	 * 
	 * @var MonetaAccountRelation
	 */
	 public $accountRelation = null;
	
}
		
/**
 * Запрос на сохранение делегированного доступа к счету.
	 * Request for saving detailed information of delegated access.
	 * 
 */	
class MonetaSaveAccountRelationRequest extends MonetaAccountRelation
{
		
	/**
	 * Платежный пароль.
	 * Payment password for account.
	 * 
	 * 
	 * @var normalizedString
	 */
	 public $paymentPassword = null;
		
	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 * 
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;
	
}
		
/**
 * Ответ, который приходит на запрос SaveAccountRelationRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения счета произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит делегированный доступ гарантированно сохранен.
	 * Save account relation response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then delegated access is modified successfully.
	 * 
 */	
class MonetaSaveAccountRelationResponse
{
	
}
		
/**
 * Запрос на удаление делегированного доступа к счету.
	 * Request for deletion of access delegation.
	 * 
 */	
class MonetaDeleteAccountRelationRequest
{
		
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 * 
	 * @var long
	 */
	 public $accountId = null;
		
	/**
	 * Email пользователя.
	 * User's Email.
	 * 
	 * 
	 * @var string
	 */
	 public $principalEmail = null;
	
}
		
/**
 * Ответ, который приходит на запрос DeleteAccountRelationRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения счета произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит делегированный доступ гарантированно удален.
	 * Delete account relation response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then delegated access is deleted successfully.
	 * 
 */	
class MonetaDeleteAccountRelationResponse
{
	
}
	?>