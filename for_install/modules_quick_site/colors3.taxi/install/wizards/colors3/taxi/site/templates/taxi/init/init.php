<?class Model_Apitm {		public $ip;	public $port;	public $api_name = 'common_api';	public $api_version = '1.0';	public $api_key = '';	public $timeout = 1;	public function setIp($ip='0.0.0.0') {		$this->ip = $ip;	}		public function setPort($port=8080) {		$this->port = $port;	}		public function setKey($key='') {		$this->api_key = $key;	}			public function get($method, $params = '') {		if (is_array($params)) $params = http_build_query($params);		$sign = $this->getSignature($params);		if (strlen($params) > 0)			$url = $this->getUrl($method) . "?" . $params . ' HTTP/1.1';		else			$url = $this->getUrl($method) . ' HTTP/1.1';		$options = array('http' =>			array(			        'method' => 'GET',			        'header' => 'Signature: ' . $this->getSignature($params),				'timeout'=>$this->timeout				)		);				$context = stream_context_create($options);		$result = file_get_contents($url, false, $context);								return json_decode($result);	}		public function post($method, $params = '') {		if (is_array($params)) $params = http_build_query($params);			return  $this->sendPOSTRequest($method, $params);	}		public function oldPost($method, $params)	{		$url = $this->getUrl($method);		$sign = $this->getSignature($params);		$context = stream_context_create(array(			'https'=>array(			'method'=>'POST',			'header'=>"Signature: $sign\r\n".				"Content-Type: application/x-www-form-urlencoded\r\n",			"Content-Length: " . strlen($params),			'content'=>$params,			'timeout'=>$this->timeout,			)		));			try {			$response = file_get_contents($url, false, $context);			$response = json_decode($response);		} catch (Exception $e) {			$response = false;		}		return $response;	}		private function getUrl($method) {		return "https://{$this->ip}:{$this->port}/{$this->api_name}/{$this->api_version}/{$method}";	}		private function getSignature($params) {				return MD5($params . $this->api_key);	}		public function sendPOSTRequest($apiMethod, $requestData)	{		$ch = curl_init($this->getUrl($apiMethod));		curl_setopt($ch, CURLOPT_POST, TRUE);		curl_setopt($ch, CURLOPT_POSTFIELDS, $requestData);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);		curl_setopt($ch, CURLOPT_TIMEOUT, 10);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);		curl_setopt($ch, CURLOPT_HTTPHEADER, array(			'Signature: ' . $this->getSignature($requestData),			'Content-Type: application/x-www-form-urlencode'		));			$result = curl_exec($ch);		$errorCode = curl_errno($ch);		curl_close($ch);		//print_r($result);		return ($errorCode == CURLE_OK)	? json_decode($result) : false;	}}AddEventHandler("iblock", "OnAfterIBlockElementAdd", Array("taxi_AfterElementAdd", "taxi_AfterElementAddSendMail"));class taxi_AfterElementAdd{    function taxi_AfterElementAddSendMail(&$arFields)    {		CModule::IncludeModule ('iblock');				$adminEmail = COption::GetOptionString('main', 'email_from', 'default@admin.email');							$site = '';		$db_site = CSite::GetList($by = 'sort', $order='asc', array());		if ($this_site = $db_site->GetNext()){			$site =  $this_site;		}						$db_iblock = CIBlock::GetByID($arFields['IBLOCK_ID']);				$iblock = $db_iblock->GetNext();				if($iblock['CODE'] == 'orders')        {			/*$arEventFields = array(				'EMAIL'=>$adminEmail,				'DEFAULT_EMAIL_FROM'=>$adminEmail			);			CEvent::Send("NEW_ORDER_TAXI", SITE_ID, $arEventFields);*/									$send = new Model_Apitm();			$db_connect = CIBlockElement::GetList(false, array('NAME'=>'taxi_master', 													'IBLOCK_CODE'=>'connect', 'ACTIVE'=>'Y'), false, false, array(													'ID', 													'IBLOCK_ID', 													'PROPERTY_HOST', 													'PROPERTY_KEY', 													'PROPERTY_PORT', 													'PROPERTY_SECRET'));			if ($element = $db_connect->GetNext()){				$send->setIp($element['PROPERTY_HOST_VALUE']);				$send->setPort($element['PROPERTY_PORT_VALUE']);				$send->setKey($element['PROPERTY_KEY_VALUE']);				$method = 'create_order HTTP/1.1';												$array_data = array();				$array_data['source'] = '';				$array_data['dest'] = '';				$array_data['comment'] = '';								$arEventFields = array();						foreach ($arFields['PROPERTY_VALUES'] as $key=>$field){										$db_res = CIBlockProperty::GetList(array("sort"=>"asc", "name"=>"asc"), array('ID'=>$key));					$res = $db_res->GetNext();										switch ($res['CODE']){						case 'FROM':							$array_data['source'] .= $field;							$arEventFields['OTKUDA'] .= $field;							break;						case 'FROM_HOUSE':							if (strlen($field) > 0){								$array_data['source'] .= ', '.$field;								$arEventFields['OTKUDA'] .= ', '.$field;							}							break;						case 'FROM_HOUSING':							if (strlen($field) > 0){ 								$array_data['comment'] .= ', housing:'.$field.';';								$arEventFields['OTKUDA'] .= ', housing:'.$field.';';							}									break;						case 'FROM_BUILDING':							if (strlen($field) > 0){ 								$array_data['comment'] .= ', building:'.$field.';';								$arEventFields['OTKUDA'] .= ', building:'.$field.';';							}								break;						case 'FROM_PORCH':							if (strlen($field) > 0){ 								$array_data['source'] .= '-'.$field;								$arEventFields['OTKUDA'] .= '-'.$field;							}							break;						case 'TO':													$array_data['dest'] .= $field;							$arEventFields['KUDA'] .= $field;														break;						case 'TO_HOUSE':							if (strlen($field) > 0){								$array_data['dest'] .= ', '.$field;								$arEventFields['KUDA'] .= ', '.$field;							}							break;						case 'TO_HOUSING':							if (strlen($field) > 0){ 								$array_data['comment'] .= ', housing:'.$field.';';								$arEventFields['KUDA'] .= ', housing:'.$field.';';							}								break;						case 'TO_BUILDING':							if (strlen($field) > 0){								$array_data['comment'] .= ', building:'.$field.';';								$arEventFields['KUDA'] .= ', building:'.$field.';';							}								break;						case 'TO_PORCH':							if (strlen($field) > 0){								$array_data['dest'] .= '-'.$field;								$arEventFields['KUDA'] .= '-'.$field;							}							break;						case 'FIO':							if (strlen($field) > 0){ 								$array_data['customer'] = $field;								$arEventFields['FIO'] = $field;							}							break;						case 'TEL':							$array_data['phone'] = preg_replace('~\D~', '', $field);							$arEventFields['PHONE'] = $field;							break;						case 'DATA':							if (strlen($field) >0){																$date = explode(' ', $field);								$is_prior = 'true';							}							else{								$date = explode(' ', $arFields['DATE_ACTIVE_FROM']);								$is_prior = 'false';							}														$time = str_replace(':', '', $date[1]);							$date = explode('.', $date[0]);							krsort($date);							$date = implode($date);							$date .= $time;							$array_data['source_time'] = $date;							$arEventFields['DATE'] = $field;									break;						case 'TIP':							$db_type = CIBlockElement::GetByID($field);							$type = $db_type->GetNext();							$array_data['comment'] .= 'Type auto:'.$type['NAME'];							$arEventFields['TYPE_AUTO'] = $type['NAME'];							break;						case 'DOP':							$rsProp = CIBlockProperty::GetList(Array("sort"=>"asc", "name"=>"asc"), Array("ACTIVE"=>"Y", "IBLOCK_CODE"=>'orders'));							while ($arr=$rsProp->Fetch())							if ($arr['CODE'] == 'DOP') break;							$rsPropEnum = CIBlockProperty::GetPropertyEnum($arr['ID'], array('SORT'=>'asc'), array());							$dop = array();							while ($arrEnum=$rsPropEnum->GetNext())							{								if (in_array($arrEnum['ID'], $field))									$dop[] = $arrEnum['VALUE'];							}							if (count($dop) > 0){								$array_data['comment'] .= ';Dop params:{'.implode(',', $dop).'}';															$arEventFields['DOP'] = implode(',', $dop);							}							break;						case 'COMM':							if (strlen($field) > 0){								$array_data['comment'] .= ';Comments:'.$field;								$arEventFields['COMMENT'] = $field;							}								break;					}									}								$array_data['is_prior'] = $is_prior;																				$data = http_build_query($array_data);													$result = $send->sendPOSTRequest($method, $data);				$_SESSION['order'] = $result;				$_SESSION['source'] = $array_data['source'];				reset($arFields['PROPERTY_VALUES']);				$_SESSION['order_city'] = current($arFields['PROPERTY_VALUES']);								$arEventFields['EMAIL'] = $adminEmail;				$arEventFields['DEFAULT_EMAIL_FROM'] = $adminEmail;				$arEventFields['SITE_NAME'] = $site['SITE_NAME'];				$arEventFields['SERVER_NAME'] = $_SERVER['HTTP_HOST'];								CEvent::Send("NEW_ORDER_TAXI", SITE_ID, $arEventFields);			}				        }		elseif($iblock['CODE'] == 'reviews')		{				$arFields['PROPERTY_VALUES'] = array_values($arFields['PROPERTY_VALUES']);			$arEventFields = array('SITE_NAME'=>$site['SITE_NAME'], 'DEFAULT_EMAIL_FROM'=>$adminEmail, 'EMAIL'=>$adminEmail, 'NAME'=>$arFields['NAME'], 'TEXT'=>$arFields['PREVIEW_TEXT'], 'PHONE'=>$arFields['PROPERTY_VALUES'][0], 'RATING'=>$arFields['PROPERTY_VALUES'][1], 'SERVER_NAME'=>$_SERVER['HTTP_HOST']);			CEvent::Send("REVIEW_POSTED", SITE_ID, $arEventFields);		}		elseif($iblock['CODE'] == 'call')		{						$arFields['PROPERTY_VALUES'] = array_values($arFields['PROPERTY_VALUES']);			$arEventFields = array('SITE_NAME'=>$site['SITE_NAME'], 'DEFAULT_EMAIL_FROM'=>$adminEmail, 'EMAIL'=>$adminEmail, 'FIO'=>$arFields['PROPERTY_VALUES'][0], 'WHEN_TO_CALL'=>$arFields['PROPERTY_VALUES'][2], 'PHONE'=>$arFields['PROPERTY_VALUES'][1], 'SERVER_NAME'=>$_SERVER['HTTP_HOST']);						CEvent::Send("ORDER_CALL", SITE_ID, $arEventFields);		}		elseif($iblock['CODE'] == 'driver')		{						$arFields['PROPERTY_VALUES'] = array_values($arFields['PROPERTY_VALUES']);			$arEventFields = array('DEFAULT_EMAIL_FROM'=>$adminEmail,								'SITE_NAME'=>$site['SITE_NAME'],								'PROP_0'=>$arFields['PROPERTY_VALUES'][0],								'PROP_1'=>$arFields['PROPERTY_VALUES'][1],								'PROP_2'=>$arFields['PROPERTY_VALUES'][2],								'PROP_3'=>$arFields['PROPERTY_VALUES'][3],								'PROP_4'=>$arFields['PROPERTY_VALUES'][4],								'PROP_5'=>$arFields['PROPERTY_VALUES'][5],								'PROP_7'=>$arFields['PROPERTY_VALUES'][7],								'PROP_9'=>$arFields['PROPERTY_VALUES'][9],								'PROP_10'=>$arFields['PROPERTY_VALUES'][10],								'PROP_11'=>$arFields['PROPERTY_VALUES'][11],								'PROP_13'=>$arFields['PROPERTY_VALUES'][13],								'PROP_14'=>$arFields['PROPERTY_VALUES'][14],								'PROP_25'=>$arFields['PROPERTY_VALUES'][25],								'PROP_26'=>$arFields['PROPERTY_VALUES'][26],								'EMAIL'=>$adminEmail);						CEvent::Send("NEW_DRIVER", SITE_ID, $arEventFields);		}    }}?>