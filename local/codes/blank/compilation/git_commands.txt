cd C:/
mkdir project
cd ./project
touch readme.txt    				- создали файла для примера


git init										- инициализация репозатория
git status								- проверка статуса
git commit -a -m"comment"   - фиксируем изменения
git log   									- можна посмотреть что когда и кем было изменено.
git diff										- посмотреть что изменялось в файле
git add  .									-добавит все файлы репозитория



Создаем репозиторий на GitHub

git remote add origin https://github.com/VitaliiSestrenskiy/project.git
git push -u	original master				-отправляет все файлы на удалееный репозиторий
git pull 												-из сервера на локальную машину перебрасываются файлы



Алгоритм

1. зайшли в репозиторій
2. ініціалізували репозиторій  										git init	
3. добавити всі файли, які є в репозиторії				    		git add  .
4. провірили статус чи все норм  									git status	
5. зафіксували всі файли 											git commit -a -m"comment"
6. создали репозиторій на GitHub
7. готуємо всі файли до  відправки  на сервер  						git remote add origin https://github.com/VitaliiSestrenskiy/project.git
8. отправляємо файли на сервер 										git push -u	original master



Алгоритм, якщо треба щось закинути на сервер при зміні

1. зайшли у репозиторій 
2. подивились статус файлів 										git status
3. додаємо файли, які є в репозиторії(нові)							git add .
4. зафіксували всі файли 											git commit -a -m"comment"
5. отправляємо на сервер 											git push 	origin



Алгоритм, если нужно с репозитория скинуть себе файлы
git clone https://github.com/jquery/jquery.git





git branch 				- проверка какая ветка сейчас используеться
git add --all    		- если мы добавили какой то файл,  но git его еще не отслеживает,  тогда мы выполняем эту команду,  чтобы git видел этот файл и отслежывал его
git branch new_style	- создание новой ветки git, вместо new_style - пишем свое название
git checkout new_style 	- переключаемся на новою ветку git
git merge new_style 	- сливаем ветку с веткой в которой мы сейчас находимся
:wq! 					- после слияния,  мы удаляем названия файлов,  которые имели конфликт,  выходим и сохраняемся ,  с помощью данной команды
git remote show         - название удаленного сервера,  используеться для push
 


Алгоритм сливания веток

1. создаю ветку,  под этой веткой веду свою разработку
2. commit все измения 
3. переключаюсь на ветку master
4. пишу git merge new_style
5. удаляю и файлов не нужный мне код
6. коммичу изменения, в консоле удаляю файлы,  которые имеют конфлик,  сохраняюсь и выхожу
7. делаю коммит
8. выкладываю изменения на сервер


Всегда
1. Сначала git pull -u origin master
2. Дальше git add .
3. git commit -m ""
4. git push origin master    (origin - это наше соединения)






